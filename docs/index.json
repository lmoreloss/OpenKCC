{
  "api/nickmaltbie.OpenKCC.Animation.CharacterAnimator.html": {
    "href": "api/nickmaltbie.OpenKCC.Animation.CharacterAnimator.html",
    "title": "Class CharacterAnimator | Tile Maps Documentation",
    "keywords": "Class CharacterAnimator Inheritance Object CharacterAnimator Namespace : nickmaltbie.OpenKCC.Animation Assembly : cs.temp.dll.dll Syntax public class CharacterAnimator : MonoBehaviour Fields animator Animator for controlling character Declaration public Animator animator Field Value Type Description Animator cameraController Camera controller for getting player rotation information Declaration public CameraController cameraController Field Value Type Description CameraController fallingThreshold Amount of time falling to switch to falling animation Declaration public float fallingThreshold Field Value Type Description Single kcc Character controller for getting character motion information Declaration public KinematicCharacterController kcc Field Value Type Description KinematicCharacterController longFallingThreshold Falling time before player goes into long falling animation Declaration public float longFallingThreshold Field Value Type Description Single movementDeadZone Dead zone to consider movement as stopped Declaration public float movementDeadZone Field Value Type Description Single turningDeadZone Dead zone to consider turning action as stopped Declaration public float turningDeadZone Field Value Type Description Single Methods Update() Declaration public void Update()"
  },
  "api/nickmaltbie.OpenKCC.Animation.CharacterAnimatorState.html": {
    "href": "api/nickmaltbie.OpenKCC.Animation.CharacterAnimatorState.html",
    "title": "Struct CharacterAnimatorState | Tile Maps Documentation",
    "keywords": "Struct CharacterAnimatorState Namespace : nickmaltbie.OpenKCC.Animation Assembly : cs.temp.dll.dll Syntax public struct CharacterAnimatorState Fields falling Declaration public bool falling Field Value Type Description Boolean jumping Declaration public bool jumping Field Value Type Description Boolean longFalling Declaration public bool longFalling Field Value Type Description Boolean move Declaration public Vector2 move Field Value Type Description Vector2 moving Declaration public bool moving Field Value Type Description Boolean rotation Declaration public float rotation Field Value Type Description Single turning Declaration public bool turning Field Value Type Description Boolean"
  },
  "api/nickmaltbie.OpenKCC.Animation.html": {
    "href": "api/nickmaltbie.OpenKCC.Animation.html",
    "title": "Namespace nickmaltbie.OpenKCC.Animation | Tile Maps Documentation",
    "keywords": "Namespace nickmaltbie.OpenKCC.Animation Classes CharacterAnimator Structs CharacterAnimatorState"
  },
  "api/nickmaltbie.OpenKCC.Character.CameraController.html": {
    "href": "api/nickmaltbie.OpenKCC.Character.CameraController.html",
    "title": "Class CameraController | Tile Maps Documentation",
    "keywords": "Class CameraController Inheritance Object CameraController Namespace : nickmaltbie.OpenKCC.Character Assembly : cs.temp.dll.dll Syntax public class CameraController : MonoBehaviour Fields baseCameraOffset Camera offset from character center Declaration public Vector3 baseCameraOffset Field Value Type Description Vector3 cameraRaycastMask What can the camera collide with Declaration public LayerMask cameraRaycastMask Field Value Type Description LayerMask cameraTransform Transform holding camera position and rotation data Declaration public Transform cameraTransform Field Value Type Description Transform currentDistance Current distance of the camera from the player position Declaration public float currentDistance Field Value Type Description Single ditherDistance Distance where the player object will dither but still be visible Declaration public float ditherDistance Field Value Type Description Single frameRotation How much the character rotated about the vertical axis this frame Declaration public float frameRotation Field Value Type Description Single maxCameraDistance Maximum distance (farthest zoom) of player camera Declaration public float maxCameraDistance Field Value Type Description Single maxPitch Declaration public float maxPitch Field Value Type Description Single minCameraDistance Minimum distance (closest zoom) of player camera Declaration public float minCameraDistance Field Value Type Description Single minPitch Minimum pitch for rotating character camera in degrees Declaration public float minPitch Field Value Type Description Single rotationRate Rotation rate of camera in degrees per second per one unit of axis movement Declaration public float rotationRate Field Value Type Description Single shadowOnlyDistance Distance in which the third person character will be completely transparent and only cast shadows Declaration public float shadowOnlyDistance Field Value Type Description Single thirdPersonCharacterBase Base object where all the third person character is stored. Declaration public GameObject thirdPersonCharacterBase Field Value Type Description GameObject transitionTime Time in seconds it takes to transition between opacity states Declaration public float transitionTime Field Value Type Description Single zoomSpeed Zoom distance change in units per second Declaration public float zoomSpeed Field Value Type Description Single Properties CameraDistance Get the current distance of the camera from the player camera location Declaration public float CameraDistance { get; } Property Value Type Description Single CameraSource Source camera position in real world space, this is where the head of the player would be, where the camera zooms out from Declaration public Vector3 CameraSource { get; } Property Value Type Description Vector3 Pitch Declaration public float Pitch { get; } Property Value Type Description Single Yaw Declaration public float Yaw { get; } Property Value Type Description Single Methods AddIgnoreObject(GameObject) Add an object to the ignore list when raycasting camera position Declaration public void AddIgnoreObject(GameObject go) Parameters Type Name Description GameObject go OnDisable() Declaration public void OnDisable() OnEnable() Declaration public void OnEnable() OnLook(InputAction.CallbackContext) Look action changes for camera movement Declaration public void OnLook(InputAction.CallbackContext context) Parameters Type Name Description InputAction.CallbackContext context OnZoom(InputAction.CallbackContext) Zoom camera in and out Declaration public void OnZoom(InputAction.CallbackContext context) Parameters Type Name Description InputAction.CallbackContext context RaycastFromCameraBase(Single, LayerMask, QueryTriggerInteraction, out RaycastHit) Declaration public bool RaycastFromCameraBase(float maxDistance, LayerMask layerMask, QueryTriggerInteraction queryTriggerInteraction, out RaycastHit hit) Parameters Type Name Description Single maxDistance LayerMask layerMask QueryTriggerInteraction queryTriggerInteraction RaycastHit hit Returns Type Description Boolean RemoveIgnoreObject(GameObject) Remove an object to the ignore list when raycasting camera position Declaration public bool RemoveIgnoreObject(GameObject go) Parameters Type Name Description GameObject go Returns Type Description Boolean SpherecastFromCameraBase(Single, LayerMask, Single, QueryTriggerInteraction, out RaycastHit) Declaration public bool SpherecastFromCameraBase(float maxDistance, LayerMask layerMask, float sphereRadius, QueryTriggerInteraction queryTriggerInteraction, out RaycastHit hit) Parameters Type Name Description Single maxDistance LayerMask layerMask Single sphereRadius QueryTriggerInteraction queryTriggerInteraction RaycastHit hit Returns Type Description Boolean Start() Declaration public void Start() Update() Declaration public void Update()"
  },
  "api/nickmaltbie.OpenKCC.Character.CameraFollow.html": {
    "href": "api/nickmaltbie.OpenKCC.Character.CameraFollow.html",
    "title": "Class CameraFollow | Tile Maps Documentation",
    "keywords": "Class CameraFollow Script to move main camera to follow the local player Inheritance Object CameraFollow Namespace : nickmaltbie.OpenKCC.Character Assembly : cs.temp.dll.dll Syntax public class CameraFollow : MonoBehaviour Methods LateUpdate() Declaration public void LateUpdate() Start() Declaration public void Start()"
  },
  "api/nickmaltbie.OpenKCC.Character.CharacterPush.html": {
    "href": "api/nickmaltbie.OpenKCC.Character.CharacterPush.html",
    "title": "Class CharacterPush | Tile Maps Documentation",
    "keywords": "Class CharacterPush Have a character controller push any dynamic rigidbody it hits Inheritance Object CharacterPush Namespace : nickmaltbie.OpenKCC.Character Assembly : cs.temp.dll.dll Syntax public class CharacterPush : MonoBehaviour Fields pushPower Power of the player push Declaration public float pushPower Field Value Type Description Single Methods PushObject(IControllerColliderHit) Push an object using a IControllerColliderHit data. Declaration public void PushObject(IControllerColliderHit hit) Parameters Type Name Description IControllerColliderHit hit Data about how the character controller hit the object."
  },
  "api/nickmaltbie.OpenKCC.Character.html": {
    "href": "api/nickmaltbie.OpenKCC.Character.html",
    "title": "Namespace nickmaltbie.OpenKCC.Character | Tile Maps Documentation",
    "keywords": "Namespace nickmaltbie.OpenKCC.Character Classes CameraController CameraFollow Script to move main camera to follow the local player CharacterPush Have a character controller push any dynamic rigidbody it hits KinematicCharacterController Kinematic character controller to move the player character as a kinematic object PlayerInputUtils Manager for player input information as a static class Enums PlayerInputState Current player input state, is the player allowed to give input or not"
  },
  "api/nickmaltbie.OpenKCC.Character.KinematicCharacterController.html": {
    "href": "api/nickmaltbie.OpenKCC.Character.KinematicCharacterController.html",
    "title": "Class KinematicCharacterController | Tile Maps Documentation",
    "keywords": "Class KinematicCharacterController Kinematic character controller to move the player character as a kinematic object Inheritance Object KinematicCharacterController Namespace : nickmaltbie.OpenKCC.Character Assembly : cs.temp.dll.dll Syntax public class KinematicCharacterController : MonoBehaviour Properties AnglePower Decrease in momentum factor due to angle change when walking. Should be a positive float value. It's an exponential applied to values between [0, 1] so values smaller than 1 create a positive curve and grater than 1 for a negative curve. Declaration public float AnglePower { get; } Property Value Type Description Single AttemptingJump Is the player attempting to jump this frame. True if they pressed jump or if the jump buffer time remaining is greater than zero. Declaration public bool AttemptingJump { get; } Property Value Type Description Boolean CanJump Can the player jump right now. Declaration public bool CanJump { get; } Property Value Type Description Boolean CanSnapDown Can a player snap down this frame, a player is only allowed to snap down if they were standing on the ground this frame or was not falling within a given buffer time. Additionally, a player must have not jumped within a small buffer time in order to attempt the action of snapping down. This stops the player from teleporting into the ground right as they start to jump. Declaration public bool CanSnapDown { get; } Property Value Type Description Boolean If a player is allowed to snap down CanSnapUp Can the player snap up this update? Declaration public bool CanSnapUp { get; } Property Value Type Description Boolean capsuleColliderCast Player collider for checking collisions. Declaration public CapsuleColliderCast capsuleColliderCast { get; } Property Value Type Description CapsuleColliderCast characterPush Push action associated with this kcc. Declaration public CharacterPush characterPush { get; } Property Value Type Description CharacterPush Down Direction of down relative to gravity with a unit length of 1 Declaration public Vector3 Down { get; } Property Value Type Description Vector3 Falling Is the player currently falling? this is true if they are either not standing on the ground or if the angle between them and the ground is grater than the player's ability to walk. Declaration public bool Falling { get; } Property Value Type Description Boolean FallingTime How long has the player been falling. Declaration public float FallingTime { get; } Property Value Type Description Single Floor Get the current object this player is standing on. Declaration public GameObject Floor { get; } Property Value Type Description GameObject Frozen Is the character collider frozen in place as of now. When frozen, the character collider will not update in any way. Declaration public bool Frozen { get; set; } Property Value Type Description Boolean InputMovement Intended direction of movement provided by. Declaration public Vector3 InputMovement { get; } Property Value Type Description Vector3 IsProne Is the player currently prone? Declaration public bool IsProne { get; } Property Value Type Description Boolean LinearVelocity linear velocity of the player measured via displacement from the previous movement. Declaration public Vector3 LinearVelocity { get; } Property Value Type Description Vector3 MaxBounces Maximum number of time player can bounce of walls/floors/objects during an update Declaration public int MaxBounces { get; } Property Value Type Description Int32 PushDecay Decay value of momentum when hitting another object. Should be between [0, 1] Declaration public float PushDecay { get; } Property Value Type Description Single StandingOnGround Is the player currently standing on the ground? Will be true if the hit the ground and the distance to the ground is less than the grounded threshold. NOTE, will be false if the player is overlapping with the ground or another object as it is difficult to tell whether they are stuck in a wall (and would therefore not be on the ground) versus when they are stuck in the floor. Declaration public bool StandingOnGround { get; } Property Value Type Description Boolean StepUpDepth Minimum depth of a stair for a user to climb up (thinner steps than this value will not let the player climb) Declaration public float StepUpDepth { get; } Property Value Type Description Single Up Direction of up relative to gravity with a unit length of 1 Declaration public Vector3 Up { get; } Property Value Type Description Vector3 Velocity Get the current player velocity. Declaration public Vector3 Velocity { get; } Property Value Type Description Vector3 VerticalSnapUp Distance that the player can snap up when moving up stairs or vertical steps in terrain Declaration public float VerticalSnapUp { get; } Property Value Type Description Single Methods CheckGrounded() Update the current grounded state of this kinematic character controller Declaration public void CheckGrounded() FallingAngle(Single) Check if a player is falling for a given max walk angle. Declaration public bool FallingAngle(float maxAngle) Parameters Type Name Description Single maxAngle Maximum walk angle for the player. Returns Type Description Boolean True if the player is slipping/falling on the slope they are currently standing on. FixedUpdate() Fixed update to move the player based on player input. Declaration public void FixedUpdate() GetProjectedMovement() Get a vector of the projected movement onto the plane the player is standing on. Declaration public Vector3 GetProjectedMovement() Returns Type Description Vector3 Vector of player movement based on input velocity rotated by player view and projected onto the ground. GetProjectedMovement(Vector3) The the player's projected movement onto the ground based on some input movement vector. Declaration public Vector3 GetProjectedMovement(Vector3 inputMovement) Parameters Type Name Description Vector3 inputMovement Input movement of the player. Returns Type Description Vector3 Vector of player movement based on input velocity rotated by player view and projected onto the ground. KnockPlayerProne(Single, Single) Knock a player prone for a given period of time. Declaration public void KnockPlayerProne(float minProneTime, float maxProneTime) Parameters Type Name Description Single minProneTime Single maxProneTime KnockPlayerProne(Single, Single, Vector3, Vector3) Knock the player prone for a given time and with an initial velocity. Declaration public void KnockPlayerProne(float minProneTime, float maxProneTime, Vector3 linearVelocity, Vector3 angularVelocity) Parameters Type Name Description Single minProneTime Minimum time for player to be prone. Single maxProneTime Maximum time for player to be prone. Vector3 linearVelocity Linear velocity of player when knocked prone. Vector3 angularVelocity Angular velocity of player when knocked prone. MovePlayer(Vector3, Boolean) Move the player based on some vector of desired movement. Declaration public bool MovePlayer(Vector3 movement, bool stopSnapUp = false) Parameters Type Name Description Vector3 movement Movement in world space in which the player model should be moved. Boolean stopSnapUp Should snapping up be forcibly stopped. Returns Type Description Boolean MoveWithGround() Move the player with the ground if possible based on the ground's velocity at a given point. Declaration public void MoveWithGround() OnDestroy() Cleanup attached foot object when this is destroyed. Declaration public void OnDestroy() OnDisable() On disable, detach any connected actions. Declaration public void OnDisable() OnEnable() When enabled, ensure actions are configured properly. Declaration public void OnEnable() OnJump(InputAction.CallbackContext) Action for when player attempts to jump. Declaration public void OnJump(InputAction.CallbackContext context) Parameters Type Name Description InputAction.CallbackContext context OnMove(InputAction.CallbackContext) Action for when player attempts to move. Declaration public void OnMove(InputAction.CallbackContext context) Parameters Type Name Description InputAction.CallbackContext context OnSprint(InputAction.CallbackContext) Action for when player attempts to sprint. Declaration public void OnSprint(InputAction.CallbackContext context) Parameters Type Name Description InputAction.CallbackContext context PlayerJump(Single) Give player vertical velocity if they can jump and are attempting to jump. Declaration public bool PlayerJump(float fixedDeltaTime) Parameters Type Name Description Single fixedDeltaTime Time in an update Returns Type Description Boolean true if the player successfully jumped, false otherwise PushOutOverlapping() Push the player out of any overlapping objects. This will constrain movement to only pushing the player at maxPushSpeed out of overlapping objects as to not violently teleport the player when they overlap with another object. Declaration public Vector3 PushOutOverlapping() Returns Type Description Vector3 Total distance player was pushed. RotatedMovement(Vector3) Player rotated movement that they intend to move. Declaration public Vector3 RotatedMovement(Vector3 inputMovement) Parameters Type Name Description Vector3 inputMovement Input movement vector of the player Returns Type Description Vector3 SnapPlayerDown() Snap the player down onto the ground Declaration public void SnapPlayerDown() Start() Setup KCC components on start. Declaration public void Start()"
  },
  "api/nickmaltbie.OpenKCC.Character.PlayerInputState.html": {
    "href": "api/nickmaltbie.OpenKCC.Character.PlayerInputState.html",
    "title": "Enum PlayerInputState | Tile Maps Documentation",
    "keywords": "Enum PlayerInputState Current player input state, is the player allowed to give input or not Namespace : nickmaltbie.OpenKCC.Character Assembly : cs.temp.dll.dll Syntax public enum PlayerInputState Fields Name Description Allow Deny"
  },
  "api/nickmaltbie.OpenKCC.Character.PlayerInputUtils.html": {
    "href": "api/nickmaltbie.OpenKCC.Character.PlayerInputUtils.html",
    "title": "Class PlayerInputUtils | Tile Maps Documentation",
    "keywords": "Class PlayerInputUtils Manager for player input information as a static class Inheritance Object PlayerInputUtils Namespace : nickmaltbie.OpenKCC.Character Assembly : cs.temp.dll.dll Syntax public static class PlayerInputUtils Fields DefaultMouseSensitivity Default mouse sensitivity Declaration public const float DefaultMouseSensitivity = 0.25F Field Value Type Description Single maximumMouseSensitivity Maximum mouse sensitivity value multiplier Declaration public static readonly float maximumMouseSensitivity Field Value Type Description Single minimumMouseSensitivity Minimum mouse sensitivity value multiplier Declaration public static readonly float minimumMouseSensitivity Field Value Type Description Single mouseSensitivity Mouse sensitivity multiplier (should be between 0.05 and 1.0 hopefully) Declaration public static float mouseSensitivity Field Value Type Description Single playerMovementState Current state of the player movement action Declaration public static PlayerInputState playerMovementState Field Value Type Description PlayerInputState"
  },
  "api/nickmaltbie.OpenKCC.Demo.DrawKCCBounces.html": {
    "href": "api/nickmaltbie.OpenKCC.Demo.DrawKCCBounces.html",
    "title": "Class DrawKCCBounces | Tile Maps Documentation",
    "keywords": "Class DrawKCCBounces Draw the bounces using the gizmos in unity. Inheritance Object DrawKCCBounces Namespace : nickmaltbie.OpenKCC.Demo Assembly : cs.temp.dll.dll Syntax public class DrawKCCBounces : MonoBehaviour Fields bounceColors Colors for various iterations of drawing, will loop back to start if this runs out. Declaration public Color[] bounceColors Field Value Type Description Color [] drawInitialCollider Should a collider at the position of the character be drawn? Declaration public bool drawInitialCollider Field Value Type Description Boolean drawOverlapColliders Should colliders for overlapping objects be drawn? Declaration public bool drawOverlapColliders Field Value Type Description Boolean drawWhenStill Should the colliders be drawn when the player is not moving Declaration public bool drawWhenStill Field Value Type Description Boolean fillAlpha Alpha value for drawing the character collider fill. Declaration public float fillAlpha Field Value Type Description Single maxBounces Maximum bounces when calculating movement. Declaration public int maxBounces Field Value Type Description Int32 movementDistance Total distance to move player when drawing colliders. Declaration public float movementDistance Field Value Type Description Single outlineAlpha Alpha value for drawing the character collider outline. Declaration public float outlineAlpha Field Value Type Description Single overlapColor Color of overlapping objects for the character collider gizmo. Declaration public Color overlapColor Field Value Type Description Color useProjectedMovement Should the movement vector be projected onto the ground before moving? Declaration public bool useProjectedMovement Field Value Type Description Boolean Methods OnDrawGizmos() Declaration public void OnDrawGizmos() Start() Declaration public void Start()"
  },
  "api/nickmaltbie.OpenKCC.Demo.DrawKCCGrounded.html": {
    "href": "api/nickmaltbie.OpenKCC.Demo.DrawKCCGrounded.html",
    "title": "Class DrawKCCGrounded | Tile Maps Documentation",
    "keywords": "Class DrawKCCGrounded Draw the Grounded state of player using the gizmos in unity. Inheritance Object DrawKCCGrounded Namespace : nickmaltbie.OpenKCC.Demo Assembly : cs.temp.dll.dll Syntax public class DrawKCCGrounded : MonoBehaviour Fields fillAlpha Alpha value for drawing the character collider fill. Declaration public float fillAlpha Field Value Type Description Single floatingColor Color of of player when floating above ground. Declaration public Color floatingColor Field Value Type Description Color groundCheckDistance How far should the downward cast be made. Declaration public float groundCheckDistance Field Value Type Description Single groundedColor Color of player when standing on the ground. Declaration public Color groundedColor Field Value Type Description Color groundedDistance How far is considered grounded. Declaration public float groundedDistance Field Value Type Description Single outlineAlpha Alpha value for drawing the character collider outline. Declaration public float outlineAlpha Field Value Type Description Single Methods OnDrawGizmos() Declaration public void OnDrawGizmos() Start() Declaration public void Start()"
  },
  "api/nickmaltbie.OpenKCC.Demo.DrawKCCGroundedAngle.html": {
    "href": "api/nickmaltbie.OpenKCC.Demo.DrawKCCGroundedAngle.html",
    "title": "Class DrawKCCGroundedAngle | Tile Maps Documentation",
    "keywords": "Class DrawKCCGroundedAngle Draw angle the kcc makes between the ground and their player as a debug gizmo. Inheritance Object DrawKCCGroundedAngle Namespace : nickmaltbie.OpenKCC.Demo Assembly : cs.temp.dll.dll Syntax public class DrawKCCGroundedAngle : MonoBehaviour Fields debugAngleLength Length of arc for drawing character angle. Declaration public float debugAngleLength Field Value Type Description Single fillAlpha Alpha value for drawing the angle arc. Declaration public float fillAlpha Field Value Type Description Single groundCheckDistance How far should the downward cast be made. Declaration public float groundCheckDistance Field Value Type Description Single groundedColor Color of player when standing on the ground. Declaration public Color groundedColor Field Value Type Description Color groundedDistance How far is considered grounded. Declaration public float groundedDistance Field Value Type Description Single pointRadius Radius of grounded draw point. Declaration public float pointRadius Field Value Type Description Single slidingColor Color of of player when over the sliding threshold. Declaration public Color slidingColor Field Value Type Description Color thresholdAngle Treshold angle for when player is considered sliding. Declaration public float thresholdAngle Field Value Type Description Single useGroundPosition Should the ground position be used to draw the angle or should it be drawn from the origin of the kcc's feet. Declaration public bool useGroundPosition Field Value Type Description Boolean Methods OnDrawGizmos() Declaration public void OnDrawGizmos() Start() Declaration public void Start()"
  },
  "api/nickmaltbie.OpenKCC.Demo.DrawKCCSteps.html": {
    "href": "api/nickmaltbie.OpenKCC.Demo.DrawKCCSteps.html",
    "title": "Class DrawKCCSteps | Tile Maps Documentation",
    "keywords": "Class DrawKCCSteps Draw the step based Character Movement. Inheritance Object DrawKCCSteps Namespace : nickmaltbie.OpenKCC.Demo Assembly : cs.temp.dll.dll Syntax public class DrawKCCSteps : MonoBehaviour Fields bounceColors Colors for various iterations of drawing, will loop back to start if this runs out. Declaration public Color[] bounceColors Field Value Type Description Color [] drawInitialCollider Should a collider at the position of the character be drawn? Declaration public bool drawInitialCollider Field Value Type Description Boolean drawOverlapColliders Should colliders for overlapping objects be drawn? Declaration public bool drawOverlapColliders Field Value Type Description Boolean drawWhenStill Should the colliders be drawn when the player is not moving Declaration public bool drawWhenStill Field Value Type Description Boolean fillAlpha Alpha value for drawing the character collider fill. Declaration public float fillAlpha Field Value Type Description Single ghostColor Color of steps not used. Declaration public Color ghostColor Field Value Type Description Color movementDistance Total distance to move player when drawing colliders. Declaration public float movementDistance Field Value Type Description Single outlineAlpha Alpha value for drawing the character collider outline. Declaration public float outlineAlpha Field Value Type Description Single overlapColor Color of overlapping objects for the character collider gizmo. Declaration public Color overlapColor Field Value Type Description Color steps Number of steps in the step based movement. Declaration public int steps Field Value Type Description Int32 Methods OnDrawGizmos() Declaration public void OnDrawGizmos() Start() Declaration public void Start()"
  },
  "api/nickmaltbie.OpenKCC.Demo.html": {
    "href": "api/nickmaltbie.OpenKCC.Demo.html",
    "title": "Namespace nickmaltbie.OpenKCC.Demo | Tile Maps Documentation",
    "keywords": "Namespace nickmaltbie.OpenKCC.Demo Classes DrawKCCBounces Draw the bounces using the gizmos in unity. DrawKCCGrounded Draw the Grounded state of player using the gizmos in unity. DrawKCCGroundedAngle Draw angle the kcc makes between the ground and their player as a debug gizmo. DrawKCCSteps Draw the step based Character Movement. SimplifiedKCC Example of the KCC class with a simplified movement script for learning purposes. SimplifiedKCCWithJump Example of the KCC class with a simplified movement script for learning purposes with an additional feature of a Jump and snap down mechanic."
  },
  "api/nickmaltbie.OpenKCC.Demo.SimplifiedKCC.html": {
    "href": "api/nickmaltbie.OpenKCC.Demo.SimplifiedKCC.html",
    "title": "Class SimplifiedKCC | Tile Maps Documentation",
    "keywords": "Class SimplifiedKCC Example of the KCC class with a simplified movement script for learning purposes. Inheritance Object SimplifiedKCC Namespace : nickmaltbie.OpenKCC.Demo Assembly : cs.temp.dll.dll Syntax public class SimplifiedKCC : MonoBehaviour Fields anglePower Decrease in momentum factor due to angle change when walking. Should be a positive float value. It's an exponential applied to values between [0, 1] so values smaller than 1 create a positive curve and grater than 1 for a negative curve. Declaration public float anglePower Field Value Type Description Single cameraTransform Transform holding camera position. Declaration public Transform cameraTransform Field Value Type Description Transform gravity Speed at which the player falls. Declaration public Vector3 gravity Field Value Type Description Vector3 groundDist Distance at which the player is considered grounded. Declaration public float groundDist Field Value Type Description Single lookAround Action realted to moving the camera, should be a two component vector. Declaration public InputActionReference lookAround Field Value Type Description InputActionReference maxBounces Maximum number of bounces when moving the player. Declaration public int maxBounces Field Value Type Description Int32 maxPitch Maximum pitch for camera movement. Declaration public const float maxPitch = 90F Field Value Type Description Single maxWalkingAngle Max angle at which the player can walk. Declaration public float maxWalkingAngle Field Value Type Description Single minPitch Minimum pitch for camera movement. Declaration public const float minPitch = -90F Field Value Type Description Single movePlayer Action realted to moving the player, should be a two component vector. Declaration public InputActionReference movePlayer Field Value Type Description InputActionReference moveSpeed Player movement speed. Declaration public float moveSpeed Field Value Type Description Single rotateSpeed How fast the player can rotate in degrees per second. Declaration public float rotateSpeed Field Value Type Description Single Methods CastSelf(Vector3, Quaternion, Vector3, Single, out RaycastHit) Cast self in a given direction and get the first object hit. Declaration public bool CastSelf(Vector3 pos, Quaternion rot, Vector3 dir, float dist, out RaycastHit hit) Parameters Type Name Description Vector3 pos Quaternion rot Vector3 dir Single dist RaycastHit hit First object hit and related information, will have a distance of Mathf.Infinity if none is found. Returns Type Description Boolean True if an object is hit within distance, false otherwise. MovePlayer(Vector3) Move the player with a bounce and slide motion. Declaration public Vector3 MovePlayer(Vector3 movement) Parameters Type Name Description Vector3 movement Movement of the player. Returns Type Description Vector3 Final position of player after moving and bouncing. Start() Declaration public void Start() Update() Declaration public void Update()"
  },
  "api/nickmaltbie.OpenKCC.Demo.SimplifiedKCCWithJump.html": {
    "href": "api/nickmaltbie.OpenKCC.Demo.SimplifiedKCCWithJump.html",
    "title": "Class SimplifiedKCCWithJump | Tile Maps Documentation",
    "keywords": "Class SimplifiedKCCWithJump Example of the KCC class with a simplified movement script for learning purposes with an additional feature of a Jump and snap down mechanic. Inheritance Object SimplifiedKCCWithJump Namespace : nickmaltbie.OpenKCC.Demo Assembly : cs.temp.dll.dll Syntax public class SimplifiedKCCWithJump : MonoBehaviour Fields anglePower Decrease in momentum factor due to angle change when walking. Should be a positive float value. It's an exponential applied to values between [0, 1] so values smaller than 1 create a positive curve and grater than 1 for a negative curve. Declaration public float anglePower Field Value Type Description Single cameraTransform Transform holding camera position. Declaration public Transform cameraTransform Field Value Type Description Transform coyoteTime Time in which player can jump after they walk off the edge off a surface. Declaration public float coyoteTime Field Value Type Description Single gravity Speed at which the player falls. Declaration public Vector3 gravity Field Value Type Description Vector3 groundDist Declaration public float groundDist Field Value Type Description Single jumpAction Action realted to moving the jumping, should be a button input. Declaration public InputActionReference jumpAction Field Value Type Description InputActionReference jumpCooldown Minimum cooldown time between player jumps. Declaration public float jumpCooldown Field Value Type Description Single lookAround Declaration public InputActionReference lookAround Field Value Type Description InputActionReference maxBounces Declaration public int maxBounces Field Value Type Description Int32 maxJumpAngle Max angle at which the player can jump. Declaration public float maxJumpAngle Field Value Type Description Single maxPitch Maximum pitch for camera movement. Declaration public const float maxPitch = 90F Field Value Type Description Single maxWalkingAngle Max angle at which the player can walk. Declaration public float maxWalkingAngle Field Value Type Description Single minPitch Minimum pitch for camera movement. Declaration public const float minPitch = -90F Field Value Type Description Single movePlayer Action realted to moving the player, should be a two component vector. Declaration public InputActionReference movePlayer Field Value Type Description InputActionReference moveSpeed Player movement speed. Declaration public float moveSpeed Field Value Type Description Single rotateSpeed Declaration public float rotateSpeed Field Value Type Description Single Methods CastSelf(Vector3, Quaternion, Vector3, Single, out RaycastHit) Cast self in a given direction and get the first object hit. Declaration public bool CastSelf(Vector3 pos, Quaternion rot, Vector3 dir, float dist, out RaycastHit hit) Parameters Type Name Description Vector3 pos Quaternion rot Vector3 dir Single dist RaycastHit hit First object hit and related information, will have a distance of Mathf.Infinity if none is found. Returns Type Description Boolean True if an object is hit within distance, false otherwise. MovePlayer(Vector3) Move the player with a bounce and slide motion. Declaration public Vector3 MovePlayer(Vector3 movement) Parameters Type Name Description Vector3 movement Movement of the player. Returns Type Description Vector3 Final position of player after moving and bouncing. SnapPlayerDown() Snap the player down if they are within a specific distance of the ground. Declaration public void SnapPlayerDown() Start() Declaration public void Start() Update() Declaration public void Update()"
  },
  "api/nickmaltbie.OpenKCC.Environment.DetectPlayerStand.html": {
    "href": "api/nickmaltbie.OpenKCC.Environment.DetectPlayerStand.html",
    "title": "Class DetectPlayerStand | Tile Maps Documentation",
    "keywords": "Class DetectPlayerStand Detect when players stand on this object Inheritance Object DetectPlayerStand Namespace : nickmaltbie.OpenKCC.Environment Assembly : cs.temp.dll.dll Syntax public abstract class DetectPlayerStand : MonoBehaviour Methods StepOff() When a player steps off of this tile Declaration public virtual void StepOff() StepOn() When a player steps onto this tile Declaration public virtual void StepOn()"
  },
  "api/nickmaltbie.OpenKCC.Environment.html": {
    "href": "api/nickmaltbie.OpenKCC.Environment.html",
    "title": "Namespace nickmaltbie.OpenKCC.Environment | Tile Maps Documentation",
    "keywords": "Namespace nickmaltbie.OpenKCC.Environment Classes DetectPlayerStand Detect when players stand on this object MovingPlatform Script to translate a rigidbody object between two positions. Teleporter This will teleport rigidbodies when they collide with this object"
  },
  "api/nickmaltbie.OpenKCC.Environment.MovingGround.html": {
    "href": "api/nickmaltbie.OpenKCC.Environment.MovingGround.html",
    "title": "Namespace nickmaltbie.OpenKCC.Environment.MovingGround | Tile Maps Documentation",
    "keywords": "Namespace nickmaltbie.OpenKCC.Environment.MovingGround Classes MovementTracking Component to track an object's displacement and rotation during an update RelativeVelocityMovementTracking Component to track an object's displacement and rotation during an update. Also have a scaling factor based on player's relative velocity. This will fully attach for relative speeds below the minimum relative velocity and fully detach players for velocities over the maximum velocity threshold. RelativeVelocityRigidbodyTracking Component to track an object's displacement and rotation during an update. Also have a scaling factor based on player's relative velocity. This will fully attach for relative speeds below the minimum relative velocity and fully detach players for velocities over the maximum velocity threshold. RigidbodyMovingGround Moving ground defined by a rigidbody Interfaces IMovingGround Moving ground object that a player can move along with"
  },
  "api/nickmaltbie.OpenKCC.Environment.MovingGround.IMovingGround.html": {
    "href": "api/nickmaltbie.OpenKCC.Environment.MovingGround.IMovingGround.html",
    "title": "Interface IMovingGround | Tile Maps Documentation",
    "keywords": "Interface IMovingGround Moving ground object that a player can move along with Namespace : nickmaltbie.OpenKCC.Environment.MovingGround Assembly : cs.temp.dll.dll Syntax public interface IMovingGround Methods AvoidTransferMomentum() Should momentum be transferred to players when they leave this object. Declaration bool AvoidTransferMomentum() Returns Type Description Boolean GetDisplacementAtPoint(Vector3, Single) Get displacement of the moving object at a given point on the surface of the object (in world space) for the current fixed update. Declaration Vector3 GetDisplacementAtPoint(Vector3 point, float deltaTime) Parameters Type Name Description Vector3 point Point on the surface of the object (in world space). Single deltaTime Returns Type Description Vector3 Displacement on the surface of this object from that point for the current fixed update GetMovementWeight(Vector3, Vector3, Single) Get the weight of movement for a given player's velocity at a given point. Declaration float GetMovementWeight(Vector3 point, Vector3 playerVelocity, float deltaTime) Parameters Type Name Description Vector3 point Point where player is standing on the object. Vector3 playerVelocity Velocity of the player. Single deltaTime Returns Type Description Single Weight of player's attachment to the object given these parameters. Will be between 0 (not attached at all) and 1 (fully attached). GetTransferMomentumWeight(Vector3, Vector3, Single) Get the weight of movement of transfering momentum when a player leaves this object Declaration float GetTransferMomentumWeight(Vector3 point, Vector3 playerVelocity, float deltaTime) Parameters Type Name Description Vector3 point Point where player is standing on the object. Vector3 playerVelocity Velocity of the player. Single deltaTime Returns Type Description Single How much relative velocity teh player should retain when departing from the surface of this object via jump or fall. GetVelocityAtPoint(Vector3, Single) Get the velocity (in units per second) that the object is moving at a given point on the surface of the object (in world space). Declaration Vector3 GetVelocityAtPoint(Vector3 point, float deltaTime) Parameters Type Name Description Vector3 point Point on the surface of the object (in world space). Single deltaTime delta time for computing velocity. Returns Type Description Vector3 Velocity that the object is moving at the point. ShouldAttach() When following this object, should the player attach themselves to the object to follow it properly? This is important for rapidly moving objects. Additionally, if the object does not move but wants to push the player (such as a conveyer belt), then players should definitely not attach to the object. Declaration bool ShouldAttach() Returns Type Description Boolean"
  },
  "api/nickmaltbie.OpenKCC.Environment.MovingGround.MovementTracking.html": {
    "href": "api/nickmaltbie.OpenKCC.Environment.MovingGround.MovementTracking.html",
    "title": "Class MovementTracking | Tile Maps Documentation",
    "keywords": "Class MovementTracking Component to track an object's displacement and rotation during an update Inheritance Object MovementTracking RelativeVelocityMovementTracking Implements IMovingGround Namespace : nickmaltbie.OpenKCC.Environment.MovingGround Assembly : cs.temp.dll.dll Syntax public class MovementTracking : MonoBehaviour, IMovingGround Fields avoidTransferMomentum Should momentum be transferred to players when they leave this object. Declaration public bool avoidTransferMomentum Field Value Type Description Boolean Properties ChangeAttitude Finds the change in attitude (expressed as a quaternion) between the current and previous update. QFinal * Inv(QInitial) Declaration public Quaternion ChangeAttitude { get; } Property Value Type Description Quaternion Displacement Displacement between current and previous update Declaration public Vector3 Displacement { get; } Property Value Type Description Vector3 PreviousAttitude Previously measured attitude of an object (previous frame) Declaration public Quaternion PreviousAttitude { get; } Property Value Type Description Quaternion PreviousPosition Previously measured position of an object (previous frame) Declaration public Vector3 PreviousPosition { get; } Property Value Type Description Vector3 Methods AvoidTransferMomentum() Should momentum be transferred to players when they leave this object. Declaration public bool AvoidTransferMomentum() Returns Type Description Boolean FixedUpdate() Declaration public void FixedUpdate() GetDisplacementAtPoint(Vector3, Single) Get displacement of the moving object at a given point on the surface of the object (in world space) for the current fixed update. Declaration public Vector3 GetDisplacementAtPoint(Vector3 point, float deltaTime) Parameters Type Name Description Vector3 point Point on the surface of the object (in world space). Single deltaTime Returns Type Description Vector3 Displacement on the surface of this object from that point for the current fixed update GetMovementWeight(Vector3, Vector3, Single) Get the weight of movement for a given player's velocity at a given point. Declaration public virtual float GetMovementWeight(Vector3 point, Vector3 playerVelocity, float deltaTime) Parameters Type Name Description Vector3 point Point where player is standing on the object. Vector3 playerVelocity Velocity of the player. Single deltaTime Returns Type Description Single Weight of player's attachment to the object given these parameters. Will be between 0 (not attached at all) and 1 (fully attached). GetTransferMomentumWeight(Vector3, Vector3, Single) Declaration public float GetTransferMomentumWeight(Vector3 point, Vector3 playerVelocity, float deltaTime) Parameters Type Name Description Vector3 point Vector3 playerVelocity Single deltaTime Returns Type Description Single GetVelocityAtPoint(Vector3, Single) Get the velocity (in units per second) that the object is moving at a given point on the surface of the object (in world space). Declaration public Vector3 GetVelocityAtPoint(Vector3 point, float deltaTime) Parameters Type Name Description Vector3 point Point on the surface of the object (in world space). Single deltaTime delta time for computing velocity. Returns Type Description Vector3 Velocity that the object is moving at the point. ShouldAttach() When following this object, should the player attach themselves to the object to follow it properly? This is important for rapidly moving objects. Additionally, if the object does not move but wants to push the player (such as a conveyer belt), then players should definitely not attach to the object. Declaration public bool ShouldAttach() Returns Type Description Boolean Implements IMovingGround"
  },
  "api/nickmaltbie.OpenKCC.Environment.MovingGround.RelativeVelocityMovementTracking.html": {
    "href": "api/nickmaltbie.OpenKCC.Environment.MovingGround.RelativeVelocityMovementTracking.html",
    "title": "Class RelativeVelocityMovementTracking | Tile Maps Documentation",
    "keywords": "Class RelativeVelocityMovementTracking Component to track an object's displacement and rotation during an update. Also have a scaling factor based on player's relative velocity. This will fully attach for relative speeds below the minimum relative velocity and fully detach players for velocities over the maximum velocity threshold. Inheritance Object MovementTracking RelativeVelocityMovementTracking Implements IMovingGround Inherited Members MovementTracking.avoidTransferMomentum MovementTracking.AvoidTransferMomentum() MovementTracking.ShouldAttach() MovementTracking.PreviousPosition MovementTracking.PreviousAttitude MovementTracking.ChangeAttitude MovementTracking.Displacement MovementTracking.FixedUpdate() MovementTracking.GetVelocityAtPoint(Vector3, Single) MovementTracking.GetDisplacementAtPoint(Vector3, Single) MovementTracking.GetTransferMomentumWeight(Vector3, Vector3, Single) Namespace : nickmaltbie.OpenKCC.Environment.MovingGround Assembly : cs.temp.dll.dll Syntax public class RelativeVelocityMovementTracking : MovementTracking, IMovingGround Methods GetMovementWeight(Vector3, Vector3, Single) Get the weight of movement for a given player's velocity at a given point. Declaration public override float GetMovementWeight(Vector3 point, Vector3 playerVelocity, float deltaTime) Parameters Type Name Description Vector3 point Point where player is standing on the object. Vector3 playerVelocity Velocity of the player. Single deltaTime Returns Type Description Single Weight of player's attachment to the object given these parameters. Will be between 0 (not attached at all) and 1 (fully attached). Overrides MovementTracking.GetMovementWeight(Vector3, Vector3, Single) Implements IMovingGround"
  },
  "api/nickmaltbie.OpenKCC.Environment.MovingGround.RelativeVelocityRigidbodyTracking.html": {
    "href": "api/nickmaltbie.OpenKCC.Environment.MovingGround.RelativeVelocityRigidbodyTracking.html",
    "title": "Class RelativeVelocityRigidbodyTracking | Tile Maps Documentation",
    "keywords": "Class RelativeVelocityRigidbodyTracking Component to track an object's displacement and rotation during an update. Also have a scaling factor based on player's relative velocity. This will fully attach for relative speeds below the minimum relative velocity and fully detach players for velocities over the maximum velocity threshold. Inheritance Object RigidbodyMovingGround RelativeVelocityRigidbodyTracking Implements IMovingGround Inherited Members RigidbodyMovingGround.attachedRigidbody RigidbodyMovingGround.avoidTransferMomentum RigidbodyMovingGround.AvoidTransferMomentum() RigidbodyMovingGround.ShouldAttach() RigidbodyMovingGround.Start() RigidbodyMovingGround.GetVelocityAtPoint(Vector3, Single) RigidbodyMovingGround.GetDisplacementAtPoint(Vector3, Single) RigidbodyMovingGround.GetTransferMomentumWeight(Vector3, Vector3, Single) Namespace : nickmaltbie.OpenKCC.Environment.MovingGround Assembly : cs.temp.dll.dll Syntax public class RelativeVelocityRigidbodyTracking : RigidbodyMovingGround, IMovingGround Methods GetMovementWeight(Vector3, Vector3, Single) Get the weight of movement for a given player's velocity at a given point. Declaration public override float GetMovementWeight(Vector3 point, Vector3 playerVelocity, float deltaTime) Parameters Type Name Description Vector3 point Point where player is standing on the object. Vector3 playerVelocity Velocity of the player. Single deltaTime Returns Type Description Single Weight of player's attachment to the object given these parameters. Will be between 0 (not attached at all) and 1 (fully attached). Overrides RigidbodyMovingGround.GetMovementWeight(Vector3, Vector3, Single) Implements IMovingGround"
  },
  "api/nickmaltbie.OpenKCC.Environment.MovingGround.RigidbodyMovingGround.html": {
    "href": "api/nickmaltbie.OpenKCC.Environment.MovingGround.RigidbodyMovingGround.html",
    "title": "Class RigidbodyMovingGround | Tile Maps Documentation",
    "keywords": "Class RigidbodyMovingGround Moving ground defined by a rigidbody Inheritance Object RigidbodyMovingGround RelativeVelocityRigidbodyTracking Implements IMovingGround Namespace : nickmaltbie.OpenKCC.Environment.MovingGround Assembly : cs.temp.dll.dll Syntax public class RigidbodyMovingGround : MonoBehaviour, IMovingGround Fields attachedRigidbody Rigidbody attached to this object. Declaration protected Rigidbody attachedRigidbody Field Value Type Description Rigidbody avoidTransferMomentum Should momentum be transferred to players when they leave this object. Declaration public bool avoidTransferMomentum Field Value Type Description Boolean Methods AvoidTransferMomentum() Should momentum be transferred to players when they leave this object. Declaration public bool AvoidTransferMomentum() Returns Type Description Boolean GetDisplacementAtPoint(Vector3, Single) Get displacement of the moving object at a given point on the surface of the object (in world space) for the current fixed update. Declaration public Vector3 GetDisplacementAtPoint(Vector3 point, float deltaTime) Parameters Type Name Description Vector3 point Point on the surface of the object (in world space). Single deltaTime Returns Type Description Vector3 Displacement on the surface of this object from that point for the current fixed update GetMovementWeight(Vector3, Vector3, Single) Get the weight of movement for a given player's velocity at a given point. Declaration public virtual float GetMovementWeight(Vector3 point, Vector3 playerVelocity, float deltaTime) Parameters Type Name Description Vector3 point Point where player is standing on the object. Vector3 playerVelocity Velocity of the player. Single deltaTime Returns Type Description Single Weight of player's attachment to the object given these parameters. Will be between 0 (not attached at all) and 1 (fully attached). GetTransferMomentumWeight(Vector3, Vector3, Single) Declaration public float GetTransferMomentumWeight(Vector3 point, Vector3 playerVelocity, float deltaTime) Parameters Type Name Description Vector3 point Vector3 playerVelocity Single deltaTime Returns Type Description Single GetVelocityAtPoint(Vector3, Single) Get the velocity (in units per second) that the object is moving at a given point on the surface of the object (in world space). Declaration public Vector3 GetVelocityAtPoint(Vector3 point, float deltaTime) Parameters Type Name Description Vector3 point Point on the surface of the object (in world space). Single deltaTime delta time for computing velocity. Returns Type Description Vector3 Velocity that the object is moving at the point. ShouldAttach() When following this object, should the player attach themselves to the object to follow it properly? This is important for rapidly moving objects. Additionally, if the object does not move but wants to push the player (such as a conveyer belt), then players should definitely not attach to the object. Declaration public bool ShouldAttach() Returns Type Description Boolean Start() Declaration public void Start() Implements IMovingGround"
  },
  "api/nickmaltbie.OpenKCC.Environment.MovingPlatform.html": {
    "href": "api/nickmaltbie.OpenKCC.Environment.MovingPlatform.html",
    "title": "Class MovingPlatform | Tile Maps Documentation",
    "keywords": "Class MovingPlatform Script to translate a rigidbody object between two positions. Inheritance Object MovingPlatform Namespace : nickmaltbie.OpenKCC.Environment Assembly : cs.temp.dll.dll Syntax public class MovingPlatform : MonoBehaviour Fields linearSpeed Velocity at which this platform should move Declaration public float linearSpeed Field Value Type Description Single targetsList List of targets to move between Declaration public List<Transform> targetsList Field Value Type Description List < Transform > Properties CurrentTarget Gets the current target we're moving towards Declaration public Transform CurrentTarget { get; } Property Value Type Description Transform Methods FixedUpdate() Declaration public void FixedUpdate()"
  },
  "api/nickmaltbie.OpenKCC.Environment.Pushable.html": {
    "href": "api/nickmaltbie.OpenKCC.Environment.Pushable.html",
    "title": "Namespace nickmaltbie.OpenKCC.Environment.Pushable | Tile Maps Documentation",
    "keywords": "Namespace nickmaltbie.OpenKCC.Environment.Pushable Classes Pushable Pushable object that can be shoved with a given force Interfaces IPushable Pushable object that can be shoved with a given force"
  },
  "api/nickmaltbie.OpenKCC.Environment.Pushable.IPushable.html": {
    "href": "api/nickmaltbie.OpenKCC.Environment.Pushable.IPushable.html",
    "title": "Interface IPushable | Tile Maps Documentation",
    "keywords": "Interface IPushable Pushable object that can be shoved with a given force Namespace : nickmaltbie.OpenKCC.Environment.Pushable Assembly : cs.temp.dll.dll Syntax public interface IPushable Methods PushObject(Vector3, Vector3, Int32) Push an object at a specific position. Declaration void PushObject(Vector3 force, Vector3 point, int forceMode) Parameters Type Name Description Vector3 force Force vector applied to the object. Vector3 point Point to apply force on the object. Int32 forceMode Mode of the force being applied."
  },
  "api/nickmaltbie.OpenKCC.Environment.Pushable.Pushable.html": {
    "href": "api/nickmaltbie.OpenKCC.Environment.Pushable.Pushable.html",
    "title": "Class Pushable | Tile Maps Documentation",
    "keywords": "Class Pushable Pushable object that can be shoved with a given force Inheritance Object Pushable Implements IPushable Namespace : nickmaltbie.OpenKCC.Environment.Pushable Assembly : cs.temp.dll.dll Syntax public class Pushable : MonoBehaviour, IPushable Methods Awake() Declaration public void Awake() PushObject(Vector3, Vector3, Int32) Push an object at a specific position. Declaration public void PushObject(Vector3 force, Vector3 point, int forceMode) Parameters Type Name Description Vector3 force Force vector applied to the object. Vector3 point Point to apply force on the object. Int32 forceMode Mode of the force being applied. Implements IPushable"
  },
  "api/nickmaltbie.OpenKCC.Environment.Teleporter.html": {
    "href": "api/nickmaltbie.OpenKCC.Environment.Teleporter.html",
    "title": "Class Teleporter | Tile Maps Documentation",
    "keywords": "Class Teleporter This will teleport rigidbodies when they collide with this object Inheritance Object Teleporter Namespace : nickmaltbie.OpenKCC.Environment Assembly : cs.temp.dll.dll Syntax public class Teleporter : MonoBehaviour Fields teleportLocation Position and rotation to which objects will be teleported when they collide with this object Declaration public Transform teleportLocation Field Value Type Description Transform Methods OnTriggerEnter(Collider) Whenever something collides with this object, teleport it Declaration public void OnTriggerEnter(Collider other) Parameters Type Name Description Collider other Other object that collided with this"
  },
  "api/nickmaltbie.OpenKCC.UI.Actions.ChangeMouseSensitivity.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.Actions.ChangeMouseSensitivity.html",
    "title": "Class ChangeMouseSensitivity | Tile Maps Documentation",
    "keywords": "Class ChangeMouseSensitivity Actions to adjust mouse Sensitivity via sliders Inheritance Object ChangeMouseSensitivity Implements IBindingControl Namespace : nickmaltbie.OpenKCC.UI.Actions Assembly : cs.temp.dll.dll Syntax public class ChangeMouseSensitivity : MonoBehaviour, IBindingControl Fields mouseSensitivityPlayerPref Declaration public const string mouseSensitivityPlayerPref = \"MouseSensitivity\" Field Value Type Description String powerValue Power value for scaling mouse sensitivity between minimum and maximum Declaration public const float powerValue = 0.75F Field Value Type Description Single slider Slider to control mouse sensitivity Declaration public Slider slider Field Value Type Description Slider Methods Awake() Load saved values during startup Declaration public void Awake() GetMouseSensitivity(Single) Gets the mouse sensitivity from a given slider position Declaration public static float GetMouseSensitivity(float sliderPosition) Parameters Type Name Description Single sliderPosition Slider position between 0 and 1 Returns Type Description Single The mouse sensitivity between min sensitivity and max sensitivity GetSliderValue(Single) Get the value on a slider from a given mouse sensitivity level Declaration public static float GetSliderValue(float sensitivity) Parameters Type Name Description Single sensitivity Currently selected mouse sensitivity Returns Type Description Single The float position of a slider based on the mouse sensitivity ResetBinding() Declaration public void ResetBinding() UpdateDisplay() Declaration public void UpdateDisplay() Implements IBindingControl"
  },
  "api/nickmaltbie.OpenKCC.UI.Actions.ChangeQualityActions.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.Actions.ChangeQualityActions.html",
    "title": "Class ChangeQualityActions | Tile Maps Documentation",
    "keywords": "Class ChangeQualityActions Class to setup dropdown that controls various quality level selection and save settings between player session loadings Inheritance Object ChangeQualityActions Namespace : nickmaltbie.OpenKCC.UI.Actions Assembly : cs.temp.dll.dll Syntax public class ChangeQualityActions : MonoBehaviour Fields qualityDropdown Dropdown that modifies the quality level Declaration public Dropdown qualityDropdown Field Value Type Description Dropdown qualityLevelPlayerPrefKey String key to save quality level under Declaration public const string qualityLevelPlayerPrefKey = \"qualityLevel\" Field Value Type Description String Methods Awake() Declaration public void Awake() OnQualityLevelChange(Int32) Quality level change event Declaration public void OnQualityLevelChange(int level) Parameters Type Name Description Int32 level"
  },
  "api/nickmaltbie.OpenKCC.UI.Actions.ChangeScreenActions.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.Actions.ChangeScreenActions.html",
    "title": "Class ChangeScreenActions | Tile Maps Documentation",
    "keywords": "Class ChangeScreenActions Change screen actions to modify resolution and quality settings Inheritance Object ChangeScreenActions Namespace : nickmaltbie.OpenKCC.UI.Actions Assembly : cs.temp.dll.dll Syntax public class ChangeScreenActions : MonoBehaviour Fields confirmDialogNo Reject confirm dialog button Declaration public Button confirmDialogNo Field Value Type Description Button confirmDialogText Text for the confirm dialog information Declaration public UnityEngine.UI.Text confirmDialogText Field Value Type Description UnityEngine.UI.Text confirmDialogYes Accept confirm dialog button Declaration public Button confirmDialogYes Field Value Type Description Button confirmPanel Confirmation panel (enabled when confirming operations) Declaration public CanvasGroup confirmPanel Field Value Type Description CanvasGroup currentResolution Currently selected resolution Declaration public Resolution currentResolution Field Value Type Description Resolution displayDropdown Options to set selected monitor/display Declaration public Dropdown displayDropdown Field Value Type Description Dropdown resolutionDropdown Options to set screen resolution Declaration public Dropdown resolutionDropdown Field Value Type Description Dropdown settingsMenuController Settings menu controller (disable when the confirmation dialog is open) Declaration public MenuController settingsMenuController Field Value Type Description MenuController settingsPage Settings panel (disabled when confirming operations) Declaration public CanvasGroup settingsPage Field Value Type Description CanvasGroup vsyncToggle Toggle to control vysnc settings Declaration public Toggle vsyncToggle Field Value Type Description Toggle windowedDropdown Dropdown with windowed/fullScreen/borderless options Declaration public Dropdown windowedDropdown Field Value Type Description Dropdown Properties currentDisplay Currently selected display Declaration public int currentDisplay { get; } Property Value Type Description Int32 currentFullScreen Currently selected fullscreen mode Declaration public FullScreenMode currentFullScreen { get; } Property Value Type Description FullScreenMode Methods Awake() Declaration public void Awake() FilterResolutions(Resolution[]) Filter duplicate resolutions from a set of resolutions. Removes refresh rate from the data Declaration public static Resolution[] FilterResolutions(Resolution[] resolutions) Parameters Type Name Description Resolution [] resolutions Various resolution options Returns Type Description Resolution [] Filters duplicates with the same width and height GetFullScreenMode(String) Get the selected fullscreen mode from a selected fullscreen name Declaration public static FullScreenMode GetFullScreenMode(string selectedMode) Parameters Type Name Description String selectedMode Name of selected mode Returns Type Description FullScreenMode Fullscreen mode associated with this name GetFullScreenModeDropdownIndex(FullScreenMode) Get the fullscreen mode integer based on a selected fullscreen mode Declaration public static int GetFullScreenModeDropdownIndex(FullScreenMode mode) Parameters Type Name Description FullScreenMode mode Fullscreen mode to load Returns Type Description Int32 Index of fullscreen mode in the windowed dropdown selector OpenConfirmChangesDialog(ChangeScreenActions.ScreenSettingsGroup, Int32) Declaration public IEnumerator OpenConfirmChangesDialog(ChangeScreenActions.ScreenSettingsGroup previousSettings, int timeout = 15) Parameters Type Name Description ChangeScreenActions.ScreenSettingsGroup previousSettings Int32 timeout Returns Type Description IEnumerator OpenConfirmChangesDialog(Int32) Declaration public IEnumerator OpenConfirmChangesDialog(int timeout = 15) Parameters Type Name Description Int32 timeout Returns Type Description IEnumerator SetFullScreen(Int32) Declaration public void SetFullScreen(int fullScreenIndex) Parameters Type Name Description Int32 fullScreenIndex SetMonitor(Int32) Declaration public void SetMonitor(int targetMonitor) Parameters Type Name Description Int32 targetMonitor SetResolution(Int32) Declaration public void SetResolution(int resolutionIndex) Parameters Type Name Description Int32 resolutionIndex SetVsync(Boolean) Declaration public void SetVsync(bool isChecked) Parameters Type Name Description Boolean isChecked UpdateDisplayInfo() Declaration public void UpdateDisplayInfo()"
  },
  "api/nickmaltbie.OpenKCC.UI.Actions.ChangeScreenActions.ScreenSettingsGroup.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.Actions.ChangeScreenActions.ScreenSettingsGroup.html",
    "title": "Struct ChangeScreenActions.ScreenSettingsGroup | Tile Maps Documentation",
    "keywords": "Struct ChangeScreenActions.ScreenSettingsGroup Namespace : nickmaltbie.OpenKCC.UI.Actions Assembly : cs.temp.dll.dll Syntax public struct ScreenSettingsGroup Fields fullScreenMode Declaration public FullScreenMode fullScreenMode Field Value Type Description FullScreenMode monitor Declaration public int monitor Field Value Type Description Int32 resolution Declaration public Resolution resolution Field Value Type Description Resolution"
  },
  "api/nickmaltbie.OpenKCC.UI.Actions.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.Actions.html",
    "title": "Namespace nickmaltbie.OpenKCC.UI.Actions | Tile Maps Documentation",
    "keywords": "Namespace nickmaltbie.OpenKCC.UI.Actions Classes ChangeMouseSensitivity Actions to adjust mouse Sensitivity via sliders ChangeQualityActions Class to setup dropdown that controls various quality level selection and save settings between player session loadings ChangeScreenActions Change screen actions to modify resolution and quality settings QuitGameAction Class with behaviour to quit game RebindCompositeInput Rebind a composite set of inputs RebindInputButton Rebind an individual button input action ResetBindingsButton Reset binding of all configurable input actions ScreenLoading Screen loading status information SoundAdjustActions Actions to adjust sound levels via sliders ToggleFullScreenAction Change the fullscreen mode of the game. Structs ChangeScreenActions.ScreenSettingsGroup RebindCompositeInput.RebindingGroup Rebinding group definition that includes the string name and button to control it SoundAdjustActions.AudioMixerSettingsGroup Object containing both a mixer group and audio slider Interfaces IBindingControl A binding that can be reset"
  },
  "api/nickmaltbie.OpenKCC.UI.Actions.IBindingControl.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.Actions.IBindingControl.html",
    "title": "Interface IBindingControl | Tile Maps Documentation",
    "keywords": "Interface IBindingControl A binding that can be reset Namespace : nickmaltbie.OpenKCC.UI.Actions Assembly : cs.temp.dll.dll Syntax public interface IBindingControl Methods ResetBinding() Declaration void ResetBinding() UpdateDisplay() Declaration void UpdateDisplay()"
  },
  "api/nickmaltbie.OpenKCC.UI.Actions.QuitGameAction.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.Actions.QuitGameAction.html",
    "title": "Class QuitGameAction | Tile Maps Documentation",
    "keywords": "Class QuitGameAction Class with behaviour to quit game Inheritance Object QuitGameAction Namespace : nickmaltbie.OpenKCC.UI.Actions Assembly : cs.temp.dll.dll Syntax public class QuitGameAction : MonoBehaviour Methods QuitGame() Quit the game Declaration public void QuitGame()"
  },
  "api/nickmaltbie.OpenKCC.UI.Actions.RebindCompositeInput.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.Actions.RebindCompositeInput.html",
    "title": "Class RebindCompositeInput | Tile Maps Documentation",
    "keywords": "Class RebindCompositeInput Rebind a composite set of inputs Inheritance Object RebindCompositeInput Implements IBindingControl Namespace : nickmaltbie.OpenKCC.UI.Actions Assembly : cs.temp.dll.dll Syntax public class RebindCompositeInput : MonoBehaviour, IBindingControl Fields inputAction Composite input action being modified Declaration public InputActionReference inputAction Field Value Type Description InputActionReference inputMappingPlayerPrefPrefix Prefix for input mapping for saving to player preferences Declaration public const string inputMappingPlayerPrefPrefix = \"Input Mapping\" Field Value Type Description String menuController Menu controller related to this selected object Declaration public MenuController menuController Field Value Type Description MenuController rebindingGroups Binding groups that control binding for each component of the composite Declaration public RebindCompositeInput.RebindingGroup[] rebindingGroups Field Value Type Description RebindCompositeInput.RebindingGroup [] Properties rebindingOperation Rebinding operation action waiting for player command to change button bindings Declaration public InputActionRebindingExtensions.RebindingOperation rebindingOperation { get; } Property Value Type Description InputActionRebindingExtensions.RebindingOperation Methods Awake() Declaration public void Awake() InputMappingKey(Int32) Get the input mapping player preference key from a given index Declaration public string InputMappingKey(int index) Parameters Type Name Description Int32 index Index of binding component Returns Type Description String RebindCancel(Int32) Cancel the rebinding process for a given component of this composite axis. Declaration public void RebindCancel(int index) Parameters Type Name Description Int32 index RebindComplete(Int32) Finish the rebinding process for a given component of this composite axis. Declaration public void RebindComplete(int index) Parameters Type Name Description Int32 index Index of binding (starting at 0) ResetBinding() Declaration public void ResetBinding() Start() Declaration public void Start() StartRebinding(Int32) Start the rebinding process for a given component of this composite axis. Declaration public void StartRebinding(int index) Parameters Type Name Description Int32 index Index of binding (starting at 0) UpdateDisplay() Declaration public void UpdateDisplay() Implements IBindingControl"
  },
  "api/nickmaltbie.OpenKCC.UI.Actions.RebindCompositeInput.RebindingGroup.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.Actions.RebindCompositeInput.RebindingGroup.html",
    "title": "Struct RebindCompositeInput.RebindingGroup | Tile Maps Documentation",
    "keywords": "Struct RebindCompositeInput.RebindingGroup Rebinding group definition that includes the string name and button to control it Namespace : nickmaltbie.OpenKCC.UI.Actions Assembly : cs.temp.dll.dll Syntax [Serializable] public struct RebindingGroup Fields bindingDisplayNameText Location of descriptive name of button Declaration public UnityEngine.UI.Text bindingDisplayNameText Field Value Type Description UnityEngine.UI.Text startRebinding Button used to start rebinding operation Declaration public Button startRebinding Field Value Type Description Button waitingForInputObject Text to show when waiting for player input Declaration public GameObject waitingForInputObject Field Value Type Description GameObject"
  },
  "api/nickmaltbie.OpenKCC.UI.Actions.RebindInputButton.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.Actions.RebindInputButton.html",
    "title": "Class RebindInputButton | Tile Maps Documentation",
    "keywords": "Class RebindInputButton Rebind an individual button input action Inheritance Object RebindInputButton Implements IBindingControl Namespace : nickmaltbie.OpenKCC.UI.Actions Assembly : cs.temp.dll.dll Syntax public class RebindInputButton : MonoBehaviour, IBindingControl Fields bindingDisplayNameText Binding display name for showing the control button description Declaration public UnityEngine.UI.Text bindingDisplayNameText Field Value Type Description UnityEngine.UI.Text cancelPath Path used to cancel binding mid operation Declaration public string cancelPath Field Value Type Description String inputAction Input action being modified Declaration public InputActionReference inputAction Field Value Type Description InputActionReference inputMappingPlayerPrefPrefix Prefix for input mapping for saving to player preferences Declaration public const string inputMappingPlayerPrefPrefix = \"Input Mapping\" Field Value Type Description String menuController Menu controller related to this selected object Declaration public MenuController menuController Field Value Type Description MenuController startRebinding Button to start rebinding for the given input action Declaration public Button startRebinding Field Value Type Description Button waitingForInputObject Text to display when waiting for the player to press a new input action Declaration public GameObject waitingForInputObject Field Value Type Description GameObject Properties InputMappingKey Get the input mapping player preference key from a given index Declaration public string InputMappingKey { get; } Property Value Type Description String rebindingOperation Rebinding operation action waiting for player command to change button bindings Declaration public InputActionRebindingExtensions.RebindingOperation rebindingOperation { get; } Property Value Type Description InputActionRebindingExtensions.RebindingOperation Methods Awake() Declaration public void Awake() RebindCancel() Cancel the rebinding process for a given component of this composite axis. Declaration public void RebindCancel() RebindComplete() Finish the rebinding process for a given component of this composite axis. Declaration public void RebindComplete() ResetBinding() Declaration public void ResetBinding() Start() Declaration public void Start() StartRebinding() Start the rebinding process for a given component of this composite axis. Declaration public void StartRebinding() UpdateDisplay() Declaration public void UpdateDisplay() Implements IBindingControl"
  },
  "api/nickmaltbie.OpenKCC.UI.Actions.ResetBindingsButton.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.Actions.ResetBindingsButton.html",
    "title": "Class ResetBindingsButton | Tile Maps Documentation",
    "keywords": "Class ResetBindingsButton Reset binding of all configurable input actions Inheritance Object ResetBindingsButton Namespace : nickmaltbie.OpenKCC.UI.Actions Assembly : cs.temp.dll.dll Syntax public class ResetBindingsButton : MonoBehaviour Fields button Declaration public Button button Field Value Type Description Button Methods ResetBindings() Declaration public void ResetBindings() Start() Declaration public void Start()"
  },
  "api/nickmaltbie.OpenKCC.UI.Actions.ScreenLoading.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.Actions.ScreenLoading.html",
    "title": "Class ScreenLoading | Tile Maps Documentation",
    "keywords": "Class ScreenLoading Screen loading status information Inheritance Object ScreenLoading Namespace : nickmaltbie.OpenKCC.UI.Actions Assembly : cs.temp.dll.dll Syntax public static class ScreenLoading Fields borderlessWindowModeName Name of borderless window mode Declaration public const string borderlessWindowModeName = \"Borderless Windowed\" Field Value Type Description String fullScreenModeName Name of fullscreen mode Declaration public const string fullScreenModeName = \"FullScreen\" Field Value Type Description String setupDisplay Has the display been setup from saved settings Declaration public static bool setupDisplay Field Value Type Description Boolean windowedDropdownText Windowed states Declaration public static readonly string[] windowedDropdownText Field Value Type Description String [] windowedModeName Name of windowed mode Declaration public const string windowedModeName = \"Windowed\" Field Value Type Description String"
  },
  "api/nickmaltbie.OpenKCC.UI.Actions.SoundAdjustActions.AudioMixerSettingsGroup.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.Actions.SoundAdjustActions.AudioMixerSettingsGroup.html",
    "title": "Struct SoundAdjustActions.AudioMixerSettingsGroup | Tile Maps Documentation",
    "keywords": "Struct SoundAdjustActions.AudioMixerSettingsGroup Object containing both a mixer group and audio slider Namespace : nickmaltbie.OpenKCC.UI.Actions Assembly : cs.temp.dll.dll Syntax public struct AudioMixerSettingsGroup Fields mixerGroup Associated audio mixer group Declaration public AudioMixerGroup mixerGroup Field Value Type Description AudioMixerGroup slider Slider to control audio mixer group level Declaration public Slider slider Field Value Type Description Slider"
  },
  "api/nickmaltbie.OpenKCC.UI.Actions.SoundAdjustActions.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.Actions.SoundAdjustActions.html",
    "title": "Class SoundAdjustActions | Tile Maps Documentation",
    "keywords": "Class SoundAdjustActions Actions to adjust sound levels via sliders Inheritance Object SoundAdjustActions Namespace : nickmaltbie.OpenKCC.UI.Actions Assembly : cs.temp.dll.dll Syntax public class SoundAdjustActions : MonoBehaviour Fields maxVolume Maximum volume for sliders Declaration public const float maxVolume = 10F Field Value Type Description Single minVolume Minimum volume for sliders Declaration public const float minVolume = -20F Field Value Type Description Single mutedVolume Volume of slider when muted Declaration public const float mutedVolume = -80F Field Value Type Description Single powerValue Power value when scaling volume Declaration public const float powerValue = 2F Field Value Type Description Single settingsGroups Groups of sliders and sound mixer groups they modify Declaration public SoundAdjustActions.AudioMixerSettingsGroup[] settingsGroups Field Value Type Description SoundAdjustActions.AudioMixerSettingsGroup [] SoundVolumePrefixPlayerPrefKey Prefix key for sound volume. Declaration public const string SoundVolumePrefixPlayerPrefKey = \"SoundVolume\" Field Value Type Description String Methods GetSliderValue(Single) Get the value on a slider from a given volume level Declaration public static float GetSliderValue(float volumeLevel) Parameters Type Name Description Single volumeLevel Volume level on the slider Returns Type Description Single The float position of a slider based on the volume level GetVolumeLevel(Single) Gets the volume level from a given slider position Declaration public static float GetVolumeLevel(float sliderPosition) Parameters Type Name Description Single sliderPosition Slider position between 0 and 1 Returns Type Description Single The volume level between min volume and max volume Start() Declaration public void Start()"
  },
  "api/nickmaltbie.OpenKCC.UI.Actions.ToggleFullScreenAction.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.Actions.ToggleFullScreenAction.html",
    "title": "Class ToggleFullScreenAction | Tile Maps Documentation",
    "keywords": "Class ToggleFullScreenAction Change the fullscreen mode of the game. Inheritance Object ToggleFullScreenAction Namespace : nickmaltbie.OpenKCC.UI.Actions Assembly : cs.temp.dll.dll Syntax public class ToggleFullScreenAction : Button Fields whenFullScreen Declaration public string whenFullScreen Field Value Type Description String whenWindowed Declaration public string whenWindowed Field Value Type Description String Methods Awake() Declaration protected override void Awake() OnPointerDown(PointerEventData) Declaration public override void OnPointerDown(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Update() Declaration public void Update()"
  },
  "api/nickmaltbie.OpenKCC.UI.DisplayControls.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.DisplayControls.html",
    "title": "Class DisplayControls | Tile Maps Documentation",
    "keywords": "Class DisplayControls Inheritance Object DisplayControls Implements IScreenComponent Namespace : nickmaltbie.OpenKCC.UI Assembly : cs.temp.dll.dll Syntax public class DisplayControls : MonoBehaviour, IScreenComponent Fields inputActions Declaration public InputActionReference[] inputActions Field Value Type Description InputActionReference [] Methods OnScreenLoaded() Declaration public void OnScreenLoaded() OnScreenUnloaded() Declaration public void OnScreenUnloaded() Start() Declaration public void Start() UpdateDisplay() Declaration public void UpdateDisplay() Implements IScreenComponent"
  },
  "api/nickmaltbie.OpenKCC.UI.Events.CursorStateOnMenuLoad.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.Events.CursorStateOnMenuLoad.html",
    "title": "Class CursorStateOnMenuLoad | Tile Maps Documentation",
    "keywords": "Class CursorStateOnMenuLoad Simple class to set cursor state when the menu loads Inheritance Object CursorStateOnMenuLoad Implements IScreenComponent Namespace : nickmaltbie.OpenKCC.UI.Events Assembly : cs.temp.dll.dll Syntax public class CursorStateOnMenuLoad : MonoBehaviour, IScreenComponent Fields cursorLockMode Lock state of cursor when loading this screen Declaration public CursorLockMode cursorLockMode Field Value Type Description CursorLockMode cursorVisible Visible state of the cursor when loading this screen Declaration public bool cursorVisible Field Value Type Description Boolean Methods OnScreenLoaded() Declaration public void OnScreenLoaded() OnScreenUnloaded() Declaration public void OnScreenUnloaded() Implements IScreenComponent"
  },
  "api/nickmaltbie.OpenKCC.UI.Events.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.Events.html",
    "title": "Namespace nickmaltbie.OpenKCC.UI.Events | Tile Maps Documentation",
    "keywords": "Namespace nickmaltbie.OpenKCC.UI.Events Classes CursorStateOnMenuLoad Simple class to set cursor state when the menu loads LoadScreenOnEnable Simple class to load screen when enabled PlayerMovementStateOnMenuLoad Simple class to set player movement state when menu loads"
  },
  "api/nickmaltbie.OpenKCC.UI.Events.LoadScreenOnEnable.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.Events.LoadScreenOnEnable.html",
    "title": "Class LoadScreenOnEnable | Tile Maps Documentation",
    "keywords": "Class LoadScreenOnEnable Simple class to load screen when enabled Inheritance Object LoadScreenOnEnable Namespace : nickmaltbie.OpenKCC.UI.Events Assembly : cs.temp.dll.dll Syntax public class LoadScreenOnEnable : MonoBehaviour Fields selectedScreen Declaration public GameObject selectedScreen Field Value Type Description GameObject Methods OnEnable() Declaration public void OnEnable()"
  },
  "api/nickmaltbie.OpenKCC.UI.Events.PlayerMovementStateOnMenuLoad.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.Events.PlayerMovementStateOnMenuLoad.html",
    "title": "Class PlayerMovementStateOnMenuLoad | Tile Maps Documentation",
    "keywords": "Class PlayerMovementStateOnMenuLoad Simple class to set player movement state when menu loads Inheritance Object PlayerMovementStateOnMenuLoad Implements IScreenComponent Namespace : nickmaltbie.OpenKCC.UI.Events Assembly : cs.temp.dll.dll Syntax public class PlayerMovementStateOnMenuLoad : MonoBehaviour, IScreenComponent Fields playerInputState Player input state to set when this menu is loaded Declaration public PlayerInputState playerInputState Field Value Type Description PlayerInputState Methods OnScreenLoaded() Declaration public void OnScreenLoaded() OnScreenUnloaded() Declaration public void OnScreenUnloaded() Implements IScreenComponent"
  },
  "api/nickmaltbie.OpenKCC.UI.GameScreen.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.GameScreen.html",
    "title": "Class GameScreen | Tile Maps Documentation",
    "keywords": "Class GameScreen Game screen that can be hidden or shown to the player Inheritance Object GameScreen Namespace : nickmaltbie.OpenKCC.UI Assembly : cs.temp.dll.dll Syntax public class GameScreen : MonoBehaviour Methods DisplayScreen() Set a screen as visible and enable all attached components Declaration public void DisplayScreen() HideScreen() Hide a screen and disable player action on this screen Declaration public void HideScreen() SetupScreen(InputSystemUIInputModule) Setup a screen with a given player input (if one exists) Declaration public void SetupScreen(InputSystemUIInputModule uIInputModule) Parameters Type Name Description InputSystemUIInputModule uIInputModule"
  },
  "api/nickmaltbie.OpenKCC.UI.HideOnPlatform.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.HideOnPlatform.html",
    "title": "Class HideOnPlatform | Tile Maps Documentation",
    "keywords": "Class HideOnPlatform Simple class to hide element on a specific runtime platform. Inheritance Object HideOnPlatform Namespace : nickmaltbie.OpenKCC.UI Assembly : cs.temp.dll.dll Syntax public class HideOnPlatform : MonoBehaviour Fields hidePlatform Declaration public RuntimePlatform hidePlatform Field Value Type Description RuntimePlatform Methods Awake() Declaration public void Awake()"
  },
  "api/nickmaltbie.OpenKCC.UI.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.html",
    "title": "Namespace nickmaltbie.OpenKCC.UI | Tile Maps Documentation",
    "keywords": "Namespace nickmaltbie.OpenKCC.UI Classes DisplayControls GameScreen Game screen that can be hidden or shown to the player HideOnPlatform Simple class to hide element on a specific runtime platform. MenuController Simple class to abstract commands to change UI for a menu screen PopulateVersion RequestScreenChangeEventArgs Class to hold arguments for showing a new screen ScreenChangeEventArgs Class to hold screen change in state ShowOnPlatform Simple class to show an element on a specific runtime platform. TabPair TabStrip UIManager Class to manager various UI Screens Interfaces IScreenComponent"
  },
  "api/nickmaltbie.OpenKCC.UI.IScreenComponent.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.IScreenComponent.html",
    "title": "Interface IScreenComponent | Tile Maps Documentation",
    "keywords": "Interface IScreenComponent Namespace : nickmaltbie.OpenKCC.UI Assembly : cs.temp.dll.dll Syntax public interface IScreenComponent Methods OnScreenLoaded() Declaration void OnScreenLoaded() OnScreenUnloaded() Declaration void OnScreenUnloaded()"
  },
  "api/nickmaltbie.OpenKCC.UI.MenuController.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.MenuController.html",
    "title": "Class MenuController | Tile Maps Documentation",
    "keywords": "Class MenuController Simple class to abstract commands to change UI for a menu screen Inheritance Object MenuController Namespace : nickmaltbie.OpenKCC.UI Assembly : cs.temp.dll.dll Syntax public class MenuController : MonoBehaviour Fields actionDelay Short action delay (how fast can the screen change) Declaration public float actionDelay Field Value Type Description Single allowInputChanges Can this menu controller allow for input to change screens Declaration public bool allowInputChanges Field Value Type Description Boolean Methods PreviousScreen() Requests go to the previous screen Declaration public void PreviousScreen() SetScreen(GameObject) Request a new screen using a prefab name Declaration public void SetScreen(GameObject screenPrefab) Parameters Type Name Description GameObject screenPrefab Screen prefab to switch to SetScreen(String) Request a new screen directly through a name Declaration public void SetScreen(string name) Parameters Type Name Description String name Name of new screen to display"
  },
  "api/nickmaltbie.OpenKCC.UI.PopulateVersion.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.PopulateVersion.html",
    "title": "Class PopulateVersion | Tile Maps Documentation",
    "keywords": "Class PopulateVersion Inheritance Object PopulateVersion Namespace : nickmaltbie.OpenKCC.UI Assembly : cs.temp.dll.dll Syntax public class PopulateVersion : MonoBehaviour Methods Awake() Declaration public void Awake()"
  },
  "api/nickmaltbie.OpenKCC.UI.RequestScreenChangeEventArgs.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.RequestScreenChangeEventArgs.html",
    "title": "Class RequestScreenChangeEventArgs | Tile Maps Documentation",
    "keywords": "Class RequestScreenChangeEventArgs Class to hold arguments for showing a new screen Inheritance Object RequestScreenChangeEventArgs Namespace : nickmaltbie.OpenKCC.UI Assembly : cs.temp.dll.dll Syntax public class RequestScreenChangeEventArgs : EventArgs Fields newScreen String identifier for the new screen to load Declaration public string newScreen Field Value Type Description String"
  },
  "api/nickmaltbie.OpenKCC.UI.ScreenChangeEventArgs.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.ScreenChangeEventArgs.html",
    "title": "Class ScreenChangeEventArgs | Tile Maps Documentation",
    "keywords": "Class ScreenChangeEventArgs Class to hold screen change in state Inheritance Object ScreenChangeEventArgs Namespace : nickmaltbie.OpenKCC.UI Assembly : cs.temp.dll.dll Syntax public class ScreenChangeEventArgs : EventArgs Fields newScreen Name of the new screen being changed to Declaration public string newScreen Field Value Type Description String oldScreen Name of the previous screen shown Declaration public string oldScreen Field Value Type Description String"
  },
  "api/nickmaltbie.OpenKCC.UI.ShowOnPlatform.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.ShowOnPlatform.html",
    "title": "Class ShowOnPlatform | Tile Maps Documentation",
    "keywords": "Class ShowOnPlatform Simple class to show an element on a specific runtime platform. Inheritance Object ShowOnPlatform Namespace : nickmaltbie.OpenKCC.UI Assembly : cs.temp.dll.dll Syntax public class ShowOnPlatform : MonoBehaviour Fields showPlatform Declaration public RuntimePlatform showPlatform Field Value Type Description RuntimePlatform Methods Awake() Declaration public void Awake()"
  },
  "api/nickmaltbie.OpenKCC.UI.TabPair.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.TabPair.html",
    "title": "Class TabPair | Tile Maps Documentation",
    "keywords": "Class TabPair Inheritance Object TabPair Namespace : nickmaltbie.OpenKCC.UI Assembly : cs.temp.dll.dll Syntax public class TabPair Fields TabButton Declaration public Button TabButton Field Value Type Description Button TabContent Declaration public CanvasGroup TabContent Field Value Type Description CanvasGroup"
  },
  "api/nickmaltbie.OpenKCC.UI.TabStrip.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.TabStrip.html",
    "title": "Class TabStrip | Tile Maps Documentation",
    "keywords": "Class TabStrip Inheritance Object TabStrip Namespace : nickmaltbie.OpenKCC.UI Assembly : cs.temp.dll.dll Syntax public class TabStrip : MonoBehaviour Fields DefaultTab Declaration public Button DefaultTab Field Value Type Description Button TabCollection Declaration public TabPair[] TabCollection Field Value Type Description TabPair [] TabIconDefault Declaration public Sprite TabIconDefault Field Value Type Description Sprite TabIconPicked Declaration public Sprite TabIconPicked Field Value Type Description Sprite Properties CurrentTabIndex Declaration public int CurrentTabIndex { get; } Property Value Type Description Int32 Methods FindTabIndex(Button) Declaration protected int? FindTabIndex(Button tabButton) Parameters Type Name Description Button tabButton Returns Type Description Nullable < Int32 > PickTab(Int32) Declaration public void PickTab(int index) Parameters Type Name Description Int32 index SetTabState(Int32, Boolean) Declaration protected void SetTabState(int index, bool picked) Parameters Type Name Description Int32 index Boolean picked Start() Declaration public void Start()"
  },
  "api/nickmaltbie.OpenKCC.UI.Text.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.Text.html",
    "title": "Namespace nickmaltbie.OpenKCC.UI.Text | Tile Maps Documentation",
    "keywords": "Namespace nickmaltbie.OpenKCC.UI.Text Classes TMProUGUIHyperlinks This class handles basic link color behavior, supports also underline (static only) Does not support strike-through, but can be easily implemented in the same way as the underline forum post reference - https://forum.unity.com/threads/textmeshpro-hyperlinks.1091296/ https://github.com/EpsilonD3lta/UnityUtilities/blob/master/Scripts/Runtime/TMProUGUIHyperlinks.cs"
  },
  "api/nickmaltbie.OpenKCC.UI.Text.TMProUGUIHyperlinks.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.Text.TMProUGUIHyperlinks.html",
    "title": "Class TMProUGUIHyperlinks | Tile Maps Documentation",
    "keywords": "Class TMProUGUIHyperlinks This class handles basic link color behavior, supports also underline (static only) Does not support strike-through, but can be easily implemented in the same way as the underline forum post reference - https://forum.unity.com/threads/textmeshpro-hyperlinks.1091296/ https://github.com/EpsilonD3lta/UnityUtilities/blob/master/Scripts/Runtime/TMProUGUIHyperlinks.cs Inheritance Object TMProUGUIHyperlinks Namespace : nickmaltbie.OpenKCC.UI.Text Assembly : cs.temp.dll.dll Syntax public class TMProUGUIHyperlinks : MonoBehaviour Methods OnPointerDown(PointerEventData) Declaration public void OnPointerDown(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData OnPointerUp(PointerEventData) Declaration public void OnPointerUp(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData"
  },
  "api/nickmaltbie.OpenKCC.UI.UIManager.html": {
    "href": "api/nickmaltbie.OpenKCC.UI.UIManager.html",
    "title": "Class UIManager | Tile Maps Documentation",
    "keywords": "Class UIManager Class to manager various UI Screens Inheritance Object UIManager Namespace : nickmaltbie.OpenKCC.UI Assembly : cs.temp.dll.dll Syntax public class UIManager : MonoBehaviour Fields initialScreen Index of the first screen to show Declaration public int initialScreen Field Value Type Description Int32 inputActions Input actions used by UI Module Declaration public InputActionAsset inputActions Field Value Type Description InputActionAsset Instance Globally created instance of the UIManager Declaration public static UIManager Instance Field Value Type Description UIManager maxScreenHistory Maximum number of screen changes that can be saved Declaration public int maxScreenHistory Field Value Type Description Int32 screenPrefabs Various screens to add into the scene Declaration public List<GameScreen> screenPrefabs Field Value Type Description List < GameScreen > Properties CurrentScreen Name of the current screen being displayed Declaration public string CurrentScreen { get; } Property Value Type Description String Methods ClearHistory() Clear out history of all visited screens (except for current screen) Declaration public void ClearHistory() DestorySelf() Declaration public IEnumerator DestorySelf() Returns Type Description IEnumerator HandleScreenRequest(Object, RequestScreenChangeEventArgs) Handle a request to change screens Declaration public void HandleScreenRequest(object sender, RequestScreenChangeEventArgs eventArgs) Parameters Type Name Description Object sender sender of the event RequestScreenChangeEventArgs eventArgs arguments of screen change OnDestroy() Declaration public void OnDestroy() PreviousScreen(Object) Declaration public static void PreviousScreen(object sender) Parameters Type Name Description Object sender RequestNewScreen(Object, String) Requests a new screen to be shown Declaration public static void RequestNewScreen(object sender, string name) Parameters Type Name Description Object sender Object sending the event String name Name of new screen to show SetScreen(String) Sets this screen to be displayed Declaration public void SetScreen(string screenName) Parameters Type Name Description String screenName Name of the screen to display Start() Declaration public void Start() Events RequestScreenChange Events for requesting a screen change Declaration public static event EventHandler<RequestScreenChangeEventArgs> RequestScreenChange Event Type Type Description EventHandler < RequestScreenChangeEventArgs > ScreenChangeOccur Events for when a screen change has ocurred Declaration public static event EventHandler<ScreenChangeEventArgs> ScreenChangeOccur Event Type Type Description EventHandler < ScreenChangeEventArgs >"
  },
  "api/nickmaltbie.OpenKCC.Utils.CapsuleColliderCast.html": {
    "href": "api/nickmaltbie.OpenKCC.Utils.CapsuleColliderCast.html",
    "title": "Class CapsuleColliderCast | Tile Maps Documentation",
    "keywords": "Class CapsuleColliderCast ColliderCast behaviour intended to work with any capsule collider shape. Inheritance Object CapsuleColliderCast Implements IColliderCast Namespace : nickmaltbie.OpenKCC.Utils Assembly : cs.temp.dll.dll Syntax public class CapsuleColliderCast : MonoBehaviour, IColliderCast Methods CastSelf(Vector3, Quaternion, Vector3, Single, out RaycastHit) Cast self in a given direction and get the first object hit. Declaration public bool CastSelf(Vector3 position, Quaternion rotation, Vector3 direction, float distance, out RaycastHit hit) Parameters Type Name Description Vector3 position Position of the object when it is being raycast. Quaternion rotation Rotation of the objecting when it is being raycast. Vector3 direction Direction of the raycast. Single distance Maximum distance of raycast. RaycastHit hit First object hit and related information, will have a distance of Mathf.Infinity if none is found. Returns Type Description Boolean True if an object is hit within distance, false otherwise. DrawMeshGizmo(Color, Color, Vector3, Quaternion) Draw a given mesh with the gizmos in the world. Declaration public void DrawMeshGizmo(Color outlineColor, Color fillColor, Vector3 position, Quaternion rotation) Parameters Type Name Description Color outlineColor Color to draw outline of the mesh. Color fillColor Color to draw the fill of the mesh. Vector3 position Position to draw the mesh in. Quaternion rotation Rotation to draw the mesh in. GetBottom(Vector3, Quaternion) Gets the bottom of the bounds of the collider. Declaration public Vector3 GetBottom(Vector3 position, Quaternion rotation) Parameters Type Name Description Vector3 position Position of the object when it is being checked. Quaternion rotation Rotation of the objecting when it is being checked. Returns Type Description Vector3 Bottom of the bounds of the collider. GetHits(Vector3, Quaternion, Vector3, Single) Cast self and get the objects hit that exclude this object. Declaration public IEnumerable<RaycastHit> GetHits(Vector3 position, Quaternion rotation, Vector3 direction, float distance) Parameters Type Name Description Vector3 position Position of the object when it is being raycast. Quaternion rotation Rotation of the objecting when it is being raycast. Vector3 direction Direction to cast self collider. Single distance Distance to cast self collider. Returns Type Description IEnumerable < RaycastHit > List of objects this hits when it is being raycast GetOverlapping(Vector3, Quaternion) Gets the list of objects overlapping with this object. Declaration public IEnumerable<Collider> GetOverlapping(Vector3 position, Quaternion rotation) Parameters Type Name Description Vector3 position Position of the object when it is being checked. Quaternion rotation Rotation of the objecting when it is being checked. Returns Type Description IEnumerable < Collider > The list of overlapping objects with this object. GetParams(Vector3, Quaternion) Gets transformed parameters describing this capsule collider for a given position and rotation Declaration public (Vector3, Vector3, float, float) GetParams(Vector3 position, Quaternion rotation) Parameters Type Name Description Vector3 position Position of the object. Quaternion rotation Rotation of the object. Returns Type Description (T1, T2, T3, T4) < Vector3 , Vector3 , Single , Single > The top, bottom, radius, and height of the capsule collider PushOutOverlapping(Vector3, Quaternion, Single) Get the vector to push this object out of overlapping objects with a max distance. Declaration public Vector3 PushOutOverlapping(Vector3 position, Quaternion rotation, float maxDistance) Parameters Type Name Description Vector3 position Position of the object when it is being raycast. Quaternion rotation Rotation of the objecting when it is being raycast. Single maxDistance Maximum distance the player can be pushed Returns Type Description Vector3 Direction to push the object, distance player was pushed. Implements IColliderCast"
  },
  "api/nickmaltbie.OpenKCC.Utils.CapsuleMaker.html": {
    "href": "api/nickmaltbie.OpenKCC.Utils.CapsuleMaker.html",
    "title": "Class CapsuleMaker | Tile Maps Documentation",
    "keywords": "Class CapsuleMaker Inspired by a post from Jeremy Behreandt from https://behreajj.medium.com/making-a-capsule-mesh-via-script-in-five-3d-environments-c2214abf02db Inheritance Object CapsuleMaker Namespace : nickmaltbie.OpenKCC.Utils Assembly : cs.temp.dll.dll Syntax public static class CapsuleMaker Methods CapsuleData(Int32, Int32, Int32, Single, Single, CapsuleMaker.UvProfile) Create a capsule mesh based on some configuration. Declaration public static Mesh CapsuleData(int longitudes = 32, int latitudes = 16, int rings = 0, float depth = 1F, float radius = 0.5F, CapsuleMaker.UvProfile profile = CapsuleMaker.UvProfile.Aspect) Parameters Type Name Description Int32 longitudes Int32 latitudes Int32 rings Single depth Single radius CapsuleMaker.UvProfile profile Returns Type Description Mesh DrawSolidCapsule(Vector3, Quaternion, Single, Single, Color) Declaration public static void DrawSolidCapsule(Vector3 _pos, Quaternion _rot, float _radius, float _height, Color _color = null) Parameters Type Name Description Vector3 _pos Quaternion _rot Single _radius Single _height Color _color DrawWireCapsule(Vector3, Quaternion, Single, Single, Color) Declaration public static void DrawWireCapsule(Vector3 _pos, Quaternion _rot, float _radius, float _height, Color _color = null) Parameters Type Name Description Vector3 _pos Quaternion _rot Single _radius Single _height Color _color"
  },
  "api/nickmaltbie.OpenKCC.Utils.CapsuleMaker.UvProfile.html": {
    "href": "api/nickmaltbie.OpenKCC.Utils.CapsuleMaker.UvProfile.html",
    "title": "Enum CapsuleMaker.UvProfile | Tile Maps Documentation",
    "keywords": "Enum CapsuleMaker.UvProfile Namespace : nickmaltbie.OpenKCC.Utils Assembly : cs.temp.dll.dll Syntax public enum UvProfile Fields Name Description Aspect Fixed Uniform"
  },
  "api/nickmaltbie.OpenKCC.Utils.ControllerColliderHitWrapper.html": {
    "href": "api/nickmaltbie.OpenKCC.Utils.ControllerColliderHitWrapper.html",
    "title": "Class ControllerColliderHitWrapper | Tile Maps Documentation",
    "keywords": "Class ControllerColliderHitWrapper Wrapper for the data in a ControllerColliderHit Inheritance Object ControllerColliderHitWrapper Implements IControllerColliderHit Namespace : nickmaltbie.OpenKCC.Utils Assembly : cs.temp.dll.dll Syntax public class ControllerColliderHitWrapper : IControllerColliderHit Constructors ControllerColliderHitWrapper(ControllerColliderHit, Vector3) Declaration public ControllerColliderHitWrapper(ControllerColliderHit colliderHit, Vector3 moveVector) Parameters Type Name Description ControllerColliderHit colliderHit Vector3 moveVector Properties collider Declaration public Collider collider { get; } Property Value Type Description Collider gameObject Declaration public GameObject gameObject { get; } Property Value Type Description GameObject moveDirection Declaration public Vector3 moveDirection { get; } Property Value Type Description Vector3 moveLength Declaration public float moveLength { get; } Property Value Type Description Single normal Declaration public Vector3 normal { get; } Property Value Type Description Vector3 point Declaration public Vector3 point { get; } Property Value Type Description Vector3 rigidbody Declaration public Rigidbody rigidbody { get; } Property Value Type Description Rigidbody transform Declaration public Transform transform { get; } Property Value Type Description Transform Implements IControllerColliderHit"
  },
  "api/nickmaltbie.OpenKCC.Utils.html": {
    "href": "api/nickmaltbie.OpenKCC.Utils.html",
    "title": "Namespace nickmaltbie.OpenKCC.Utils | Tile Maps Documentation",
    "keywords": "Namespace nickmaltbie.OpenKCC.Utils Classes CapsuleColliderCast ColliderCast behaviour intended to work with any capsule collider shape. CapsuleMaker Inspired by a post from Jeremy Behreandt from https://behreajj.medium.com/making-a-capsule-mesh-via-script-in-five-3d-environments-c2214abf02db ControllerColliderHitWrapper Wrapper for the data in a ControllerColliderHit KCCUtils Utility class for static functions involving kinematic character controller. KinematicCharacterControllerHit MaterialUtils PhysicsUtils Structs KCCBounce Data structure describing a bounce of the KCC when moving throughout a scene. Interfaces IColliderCast Abstraction to check for collisions and compute when this object would hit other objects. IControllerColliderHit Interface to hold the data for a controller collider hit event. Wrapping this in an interface makes the testing of a controller collider hit easier to manage. Enums CapsuleMaker.UvProfile KCCUtils.MovementAction Different actions associated with each update from the KCC Utils."
  },
  "api/nickmaltbie.OpenKCC.Utils.IColliderCast.html": {
    "href": "api/nickmaltbie.OpenKCC.Utils.IColliderCast.html",
    "title": "Interface IColliderCast | Tile Maps Documentation",
    "keywords": "Interface IColliderCast Abstraction to check for collisions and compute when this object would hit other objects. Namespace : nickmaltbie.OpenKCC.Utils Assembly : cs.temp.dll.dll Syntax public interface IColliderCast Methods CastSelf(Vector3, Quaternion, Vector3, Single, out RaycastHit) Cast self in a given direction and get the first object hit. Declaration bool CastSelf(Vector3 position, Quaternion rotation, Vector3 direction, float distance, out RaycastHit hit) Parameters Type Name Description Vector3 position Position of the object when it is being raycast. Quaternion rotation Rotation of the objecting when it is being raycast. Vector3 direction Direction of the raycast. Single distance Maximum distance of raycast. RaycastHit hit First object hit and related information, will have a distance of Mathf.Infinity if none is found. Returns Type Description Boolean True if an object is hit within distance, false otherwise. DrawMeshGizmo(Color, Color, Vector3, Quaternion) Draw a given mesh with the gizmos in the world. Declaration void DrawMeshGizmo(Color outlineColor, Color fillColor, Vector3 position, Quaternion rotation) Parameters Type Name Description Color outlineColor Color to draw outline of the mesh. Color fillColor Color to draw the fill of the mesh. Vector3 position Position to draw the mesh in. Quaternion rotation Rotation to draw the mesh in. GetBottom(Vector3, Quaternion) Gets the bottom of the bounds of the collider. Declaration Vector3 GetBottom(Vector3 position, Quaternion rotation) Parameters Type Name Description Vector3 position Position of the object when it is being checked. Quaternion rotation Rotation of the objecting when it is being checked. Returns Type Description Vector3 Bottom of the bounds of the collider. GetHits(Vector3, Quaternion, Vector3, Single) Cast self and get the objects hit that exclude this object. Declaration IEnumerable<RaycastHit> GetHits(Vector3 position, Quaternion rotation, Vector3 direction, float distance) Parameters Type Name Description Vector3 position Position of the object when it is being raycast. Quaternion rotation Rotation of the objecting when it is being raycast. Vector3 direction Direction to cast self collider. Single distance Distance to cast self collider. Returns Type Description IEnumerable < RaycastHit > List of objects this hits when it is being raycast GetOverlapping(Vector3, Quaternion) Gets the list of objects overlapping with this object. Declaration IEnumerable<Collider> GetOverlapping(Vector3 position, Quaternion rotation) Parameters Type Name Description Vector3 position Position of the object when it is being checked. Quaternion rotation Rotation of the objecting when it is being checked. Returns Type Description IEnumerable < Collider > The list of overlapping objects with this object. PushOutOverlapping(Vector3, Quaternion, Single) Get the vector to push this object out of overlapping objects with a max distance. Declaration Vector3 PushOutOverlapping(Vector3 position, Quaternion rotation, float maxDistance) Parameters Type Name Description Vector3 position Position of the object when it is being raycast. Quaternion rotation Rotation of the objecting when it is being raycast. Single maxDistance Maximum distance the player can be pushed Returns Type Description Vector3 Direction to push the object, distance player was pushed."
  },
  "api/nickmaltbie.OpenKCC.Utils.IControllerColliderHit.html": {
    "href": "api/nickmaltbie.OpenKCC.Utils.IControllerColliderHit.html",
    "title": "Interface IControllerColliderHit | Tile Maps Documentation",
    "keywords": "Interface IControllerColliderHit Interface to hold the data for a controller collider hit event. Wrapping this in an interface makes the testing of a controller collider hit easier to manage. Namespace : nickmaltbie.OpenKCC.Utils Assembly : cs.temp.dll.dll Syntax public interface IControllerColliderHit Properties collider The collider that was hit by the controller. Declaration Collider collider { get; } Property Value Type Description Collider gameObject The game object that was hit by the controller. Declaration GameObject gameObject { get; } Property Value Type Description GameObject moveDirection The direction the CharacterController was moving in when the collision occurred. Declaration Vector3 moveDirection { get; } Property Value Type Description Vector3 moveLength How far the character has travelled until it hit the collider. Declaration float moveLength { get; } Property Value Type Description Single normal The normal of the surface we collided with in world space. Declaration Vector3 normal { get; } Property Value Type Description Vector3 point The impact point in world space. Declaration Vector3 point { get; } Property Value Type Description Vector3 rigidbody The rigidbody that was hit by the controller. Declaration Rigidbody rigidbody { get; } Property Value Type Description Rigidbody transform The transform that was hit by the controller. Declaration Transform transform { get; } Property Value Type Description Transform"
  },
  "api/nickmaltbie.OpenKCC.Utils.KCCBounce.html": {
    "href": "api/nickmaltbie.OpenKCC.Utils.KCCBounce.html",
    "title": "Struct KCCBounce | Tile Maps Documentation",
    "keywords": "Struct KCCBounce Data structure describing a bounce of the KCC when moving throughout a scene. Namespace : nickmaltbie.OpenKCC.Utils Assembly : cs.temp.dll.dll Syntax public struct KCCBounce Fields action Action that ocurred during this bounce. Declaration public KCCUtils.MovementAction action Field Value Type Description KCCUtils.MovementAction finalPosition Final position once finishing this bounce. Declaration public Vector3 finalPosition Field Value Type Description Vector3 initialMomentum Initial momentum when starting the move. Declaration public Vector3 initialMomentum Field Value Type Description Vector3 initialPosition Initial position before moving. Declaration public Vector3 initialPosition Field Value Type Description Vector3 remainingMomentum Remaining momentum after this bounce. Declaration public Vector3 remainingMomentum Field Value Type Description Vector3"
  },
  "api/nickmaltbie.OpenKCC.Utils.KCCUtils.html": {
    "href": "api/nickmaltbie.OpenKCC.Utils.KCCUtils.html",
    "title": "Class KCCUtils | Tile Maps Documentation",
    "keywords": "Class KCCUtils Utility class for static functions involving kinematic character controller. Inheritance Object KCCUtils Namespace : nickmaltbie.OpenKCC.Utils Assembly : cs.temp.dll.dll Syntax public static class KCCUtils Fields Epsilon Epsilon value for spacing out the KCC very small distances. Declaration public const float Epsilon = 0.001F Field Value Type Description Single MaxAngleShoveRadians Maximum angle between two colliding objects. Declaration public const float MaxAngleShoveRadians = 90F Field Value Type Description Single Methods AttemptSnapUp(Single, Single, Vector3, Vector3, IColliderCast, Quaternion, ref Vector3) /// Attempt to snap the player up some distance. This will check if there is available space on the ledge above the point that the player collided with. If there is space, the player will be teleported up some distance. If there is not enough space on the ledge above, then this will move the player back to where they were before the attempt was made. Declaration public static bool AttemptSnapUp(float distanceToSnap, float stepUpDepth, Vector3 up, Vector3 momentum, IColliderCast colliderCast, Quaternion rotation, ref Vector3 position) Parameters Type Name Description Single distanceToSnap Distance that the player is teleported up Single stepUpDepth Vector3 up Direction of Up relative to the player Vector3 momentum The remaining momentum of the player IColliderCast colliderCast Collider cast associated with the player Quaternion rotation Rotation of the player. Vector3 position Position of the player. Returns Type Description Boolean True if the player had space on the ledge and was able to move, false if there was not enough room the player is moved back to their original position GetBounces(Int32, Single, Single, Single, Single, Boolean, Boolean, Vector3, Vector3, Quaternion, Vector3, IColliderCast, CharacterPush) Declaration public static IEnumerable<KCCBounce> GetBounces(int maxBounces, float pushDecay, float verticalSnapUp, float stepUpDepth, float anglePower, bool attemptingJump, bool canSnapUp, Vector3 position, Vector3 movement, Quaternion rotation, Vector3 up, IColliderCast colliderCast, CharacterPush push) Parameters Type Name Description Int32 maxBounces Single pushDecay Single verticalSnapUp Single stepUpDepth Single anglePower Boolean attemptingJump Boolean canSnapUp Vector3 position Vector3 movement Quaternion rotation Vector3 up IColliderCast colliderCast CharacterPush push Returns Type Description IEnumerable < KCCBounce > SnapPlayerDown(Vector3, Quaternion, Vector3, Single, IColliderCast) Snap the player down onto the ground Declaration public static Vector3 SnapPlayerDown(Vector3 position, Quaternion rotation, Vector3 dir, float dist, IColliderCast colliderCast) Parameters Type Name Description Vector3 position Position of the kcc Quaternion rotation Rotation of the kcc. Vector3 dir Direction to snap the kcc down. Single dist Maximum distance the kcc can snap. IColliderCast colliderCast Collider cast component associated with the KCC. Returns Type Description Vector3"
  },
  "api/nickmaltbie.OpenKCC.Utils.KCCUtils.MovementAction.html": {
    "href": "api/nickmaltbie.OpenKCC.Utils.KCCUtils.MovementAction.html",
    "title": "Enum KCCUtils.MovementAction | Tile Maps Documentation",
    "keywords": "Enum KCCUtils.MovementAction Different actions associated with each update from the KCC Utils. Namespace : nickmaltbie.OpenKCC.Utils Assembly : cs.temp.dll.dll Syntax public enum MovementAction Fields Name Description Bounce Move SnapUp Stop"
  },
  "api/nickmaltbie.OpenKCC.Utils.KinematicCharacterControllerHit.html": {
    "href": "api/nickmaltbie.OpenKCC.Utils.KinematicCharacterControllerHit.html",
    "title": "Class KinematicCharacterControllerHit | Tile Maps Documentation",
    "keywords": "Class KinematicCharacterControllerHit Inheritance Object KinematicCharacterControllerHit Implements IControllerColliderHit Namespace : nickmaltbie.OpenKCC.Utils Assembly : cs.temp.dll.dll Syntax public class KinematicCharacterControllerHit : IControllerColliderHit Constructors KinematicCharacterControllerHit(Collider, Rigidbody, GameObject, Transform, Vector3, Vector3, Vector3, Single) Create a hit event for a kinematic character controller Declaration public KinematicCharacterControllerHit(Collider hit, Rigidbody rigidbody, GameObject gameObject, Transform transform, Vector3 point, Vector3 normal, Vector3 moveDirection, float moveLength) Parameters Type Name Description Collider hit the collider hit by this character controller Rigidbody rigidbody the rigidbody hit by this character controller GameObject gameObject the game object that was hit by this character controller Transform transform the transform of the game object hit by this character controller Vector3 point the point that this character controller collided with the object Vector3 normal the normal vector of the hit between the character controller and the hit object Vector3 moveDirection the direction the player was moving Single moveLength the distance the player was moving Properties collider Declaration public Collider collider { get; } Property Value Type Description Collider gameObject Declaration public GameObject gameObject { get; } Property Value Type Description GameObject moveDirection Declaration public Vector3 moveDirection { get; } Property Value Type Description Vector3 moveLength Declaration public float moveLength { get; } Property Value Type Description Single normal Declaration public Vector3 normal { get; } Property Value Type Description Vector3 point Declaration public Vector3 point { get; } Property Value Type Description Vector3 rigidbody Declaration public Rigidbody rigidbody { get; } Property Value Type Description Rigidbody transform Declaration public Transform transform { get; } Property Value Type Description Transform Implements IControllerColliderHit"
  },
  "api/nickmaltbie.OpenKCC.Utils.MaterialUtils.html": {
    "href": "api/nickmaltbie.OpenKCC.Utils.MaterialUtils.html",
    "title": "Class MaterialUtils | Tile Maps Documentation",
    "keywords": "Class MaterialUtils Inheritance Object MaterialUtils Namespace : nickmaltbie.OpenKCC.Utils Assembly : cs.temp.dll.dll Syntax public static class MaterialUtils Methods RecursiveSetColorProperty(GameObject, String, Color) Declaration public static void RecursiveSetColorProperty(GameObject original, string property, Color value) Parameters Type Name Description GameObject original String property Color value RecursiveSetFloatProperty(GameObject, String, Single) Declaration public static void RecursiveSetFloatProperty(GameObject original, string property, float value) Parameters Type Name Description GameObject original String property Single value RecursiveSetShadowCasingMode(GameObject, ShadowCastingMode) Declaration public static void RecursiveSetShadowCasingMode(GameObject original, ShadowCastingMode shadowCastingMode) Parameters Type Name Description GameObject original ShadowCastingMode shadowCastingMode"
  },
  "api/nickmaltbie.OpenKCC.Utils.PhysicsUtils.html": {
    "href": "api/nickmaltbie.OpenKCC.Utils.PhysicsUtils.html",
    "title": "Class PhysicsUtils | Tile Maps Documentation",
    "keywords": "Class PhysicsUtils Inheritance Object PhysicsUtils Namespace : nickmaltbie.OpenKCC.Utils Assembly : cs.temp.dll.dll Syntax public static class PhysicsUtils Methods FilterForFirstHitAllow(GameObject, RaycastHit[], out RaycastHit) Filters a set of raycast hits for the first hit that is of a collider attached ot a specific object Declaration public static bool FilterForFirstHitAllow(GameObject target, RaycastHit[] hits, out RaycastHit closest) Parameters Type Name Description GameObject target Only game object that will be searched for RaycastHit [] hits All of the hits to process RaycastHit closest Closest hit that is attached to the ignored object Returns Type Description Boolean True if a hit was detected, false otherwise FilterForFirstHitIgnore(GameObject, RaycastHit[], out RaycastHit) Filters a set of raycast hits for the first hit that is not of a collider attached to a given game object Declaration public static bool FilterForFirstHitIgnore(GameObject ignore, RaycastHit[] hits, out RaycastHit closest) Parameters Type Name Description GameObject ignore Game object to ignore when checking for collider hit RaycastHit [] hits All of the hits to process RaycastHit closest Closest hit that is attached to the ignored object Returns Type Description Boolean True if a hit was detected, false otherwise FilterForFirstHitIgnore(List<GameObject>, RaycastHit[], out RaycastHit) Filters a set of raycast hits for the first hit that is not of a collider attached to a given game object Declaration public static bool FilterForFirstHitIgnore(List<GameObject> ignoreList, RaycastHit[] hits, out RaycastHit closest) Parameters Type Name Description List < GameObject > ignoreList Game objects to ignore when checking for collider hit RaycastHit [] hits All of the hits to process RaycastHit closest Closest hit that is attached to the ignored object Returns Type Description Boolean True if a hit was detected, false otherwise RaycastFirstHitIgnore(GameObject, Vector3, Vector3, Single, LayerMask, QueryTriggerInteraction, out RaycastHit) Compute the first object hit while ignoring a given object for a raycast. Will include overlapping objects if objects overlap. Declaration public static bool RaycastFirstHitIgnore(GameObject ignore, Vector3 source, Vector3 direction, float distance, LayerMask layerMask, QueryTriggerInteraction queryTriggerInteraction, out RaycastHit closest) Parameters Type Name Description GameObject ignore Object to ignore from raycast Vector3 source Source position of raycast Vector3 direction Direction of raycast Single distance Distance of raycast LayerMask layerMask Laymask for raycast QueryTriggerInteraction queryTriggerInteraction Query trigger interaction for raycast RaycastHit closest The closest raycast hit event Returns Type Description Boolean True if a hit was detected, false otherwise. RaycastFirstHitIgnore(List<GameObject>, Vector3, Vector3, Single, LayerMask, QueryTriggerInteraction, out RaycastHit) Compute the first object hit while ignoring a given object for a raycast. Will include overlapping objects if objects overlap. Declaration public static bool RaycastFirstHitIgnore(List<GameObject> ignoreList, Vector3 source, Vector3 direction, float distance, LayerMask layerMask, QueryTriggerInteraction queryTriggerInteraction, out RaycastHit closest) Parameters Type Name Description List < GameObject > ignoreList Object to ignore from raycast Vector3 source Source position of raycast Vector3 direction Direction of raycast Single distance Distance of raycast LayerMask layerMask Laymask for raycast QueryTriggerInteraction queryTriggerInteraction Query trigger interaction for raycast RaycastHit closest The closest raycast hit event Returns Type Description Boolean True if a hit was detected, false otherwise. RaycastHitAllow(GameObject, Vector3, Vector3, Single, LayerMask, QueryTriggerInteraction, out RaycastHit) Compute the first object hit while only looking for colliders attached to a specific object Declaration public static bool RaycastHitAllow(GameObject target, Vector3 source, Vector3 direction, float distance, LayerMask layerMask, QueryTriggerInteraction queryTriggerInteraction, out RaycastHit closest) Parameters Type Name Description GameObject target Object search for given raycast Vector3 source Source position of raycast Vector3 direction Direction of raycast Single distance Distance of raycast LayerMask layerMask Laymask for raycast QueryTriggerInteraction queryTriggerInteraction Query trigger interaction for raycast RaycastHit closest The closest raycast hit event Returns Type Description Boolean True if a hit was detected, false otherwise. SphereCastAllow(GameObject, Vector3, Single, Vector3, Single, LayerMask, QueryTriggerInteraction, out RaycastHit) Compute the first object hit while only looking for colliders attached to a specific object Declaration public static bool SphereCastAllow(GameObject target, Vector3 source, float radius, Vector3 direction, float distance, LayerMask layerMask, QueryTriggerInteraction queryTriggerInteraction, out RaycastHit closest) Parameters Type Name Description GameObject target Object search for given raycast Vector3 source Source position of raycast Single radius Radius spherecast Vector3 direction Direction of raycast Single distance Distance of raycast LayerMask layerMask Laymask for raycast QueryTriggerInteraction queryTriggerInteraction Query trigger interaction for raycast RaycastHit closest The closest raycast hit event Returns Type Description Boolean True if a hit was detected, false otherwise. SphereCastFirstHitIgnore(GameObject, Vector3, Single, Vector3, Single, LayerMask, QueryTriggerInteraction, out RaycastHit) Compute the first object hit while ignoring a given object for a spherecast. Will include overlapping objects if objects overlap. Declaration public static bool SphereCastFirstHitIgnore(GameObject ignore, Vector3 source, float radius, Vector3 direction, float distance, LayerMask layerMask, QueryTriggerInteraction queryTriggerInteraction, out RaycastHit closest) Parameters Type Name Description GameObject ignore Object to ignore from spherecast Vector3 source Source position of spherecast Single radius Radius spherecast Vector3 direction Direction of spherecast Single distance Distance of spherecast LayerMask layerMask Laymask for spherecast QueryTriggerInteraction queryTriggerInteraction Query trigger interaction for spherecast RaycastHit closest The closest raycast hit event Returns Type Description Boolean True if a hit was detected, false otherwise. SphereCastFirstHitIgnore(List<GameObject>, Vector3, Single, Vector3, Single, LayerMask, QueryTriggerInteraction, out RaycastHit) Compute the first object hit while ignoring a given object for a spherecast. Will include overlapping objects if objects overlap. Declaration public static bool SphereCastFirstHitIgnore(List<GameObject> ignoreList, Vector3 source, float radius, Vector3 direction, float distance, LayerMask layerMask, QueryTriggerInteraction queryTriggerInteraction, out RaycastHit closest) Parameters Type Name Description List < GameObject > ignoreList Objects to ignore from spherecast Vector3 source Source position of spherecast Single radius Radius spherecast Vector3 direction Direction of spherecast Single distance Distance of spherecast LayerMask layerMask Laymask for spherecast QueryTriggerInteraction queryTriggerInteraction Query trigger interaction for spherecast RaycastHit closest The closest raycast hit event Returns Type Description Boolean True if a hit was detected, false otherwise."
  },
  "index.html": {
    "href": "index.html",
    "title": "OpenKCC | Tile Maps Documentation",
    "keywords": "OpenKCC This project is a sample of the Open Kinematic Character Controller. A Kinematic Character Controller (KCC) provides a way to control a character avatar as a kinematic object that will interact with the environment. OpenKCC is an open source project hosted at https://github.com/nicholas-maltbie/OpenKCC This is an open source project licensed under a MIT License . Feel free to use a build of the project for your own work. If you see an error in the project or have any suggestions, write an issue or make a pull request, I'll happy include any suggestions or ideas into the project. You can see a demo of the project running here: https://nickmaltbie.com/OpenKCC/ . The project hosted on the website is up to date with the most recent version on the main branch of this github repo and is automatically deployed with each update to the codebase. This library was developed as part of the Falling Parkour Project here - https://github.com/nicholas-maltbie/FallingParkour Documentation Documentation on the project and scripting API is found at https://nickmaltbie.com/OpenKCC/docs/ for the latest version of the codebase. To view the documentation from a local build of the project install DocFX , use the following command from the root of the repo. docfx Documentation/docfx.json --serve The documentation for the project is stored in the folder /Documentation and can be modified and changed to update with the project. This documentation project is inspired by the project by Norman Erwan's DocFxForUnity Learning I will be making a video series discussing how the Open KCC works and going into detail about how the various features work, describing game design in general, and details about the unity engine and virtual environments. As these videos are created they will be listed here: Designing Character Controllers Intro Physics Behind Games and Character Interactions Projection Based Movement of KCC How the KCC Manages Jumping [Planned] Character Controller Case Study and Requirements Engineering [Planned] Camera controller and Dither Shader Features Movement in a 3D space including Physics based movement off dynamic surfaces Configurable jump and speed Multiplayer support Ground detection Maximum slope for walking Moving and rotating platforms Snapping up and down stairs Rag-doll mode Animation and inverse kinematics First and third person camera Adjustable camera zoom Fading character model Configurable controls Changing player model Interactable objects Some of these features are still in the previous Falling Parkour project but will be added to the Open KCC soon. Future Improvements Future improvements that are in development Slippery floors First person character model Ladders and vertical movement Climbing surfaces Procedural animations using inverse kinematics Swimming and floating in water Non-humanoid avatars and shapes Automated unit and integration testing Development If you want to help with the project, feel free to make some changes and submit a PR to the repo. This project is developed using Unity Release 2021.1.19f1 . Install this version of Unity from Unity Hub using this link: unityhub://2021.1.19f1/d0d1bb862f9d . Git LFS Setup Ensure that you also have git lfs installed. It should be setup to auto-track certain types of files as determined in the .gitattributes file. If the command to install git-lfs git lfs install is giving you trouble, try looking into the installation guide . # Run this inside the repository after cloning it # May need to run this on linux curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash sudo apt-get install git-lfs Once git lfs is installed, from in the repo, run the following command to pull objects for development. git lfs pull Githooks Setup When working with the project, make sure to setup the .githooks if you want to edit the code in the project. In order to do this, use the following command to reconfigure the core.hooksPath for your repository git config --local core.hooksPath .githooks"
  },
  "manual/introduction.html": {
    "href": "manual/introduction.html",
    "title": "Introduction to OpenKCC | Tile Maps Documentation",
    "keywords": "Introduction to OpenKCC The Open Kinematic Character Controller is an open source kinematic character controller that allows for a player moving as a kinematic object through a scene. This is done through using unity's physics engine and projection based movement. Learning As these videos are created they will be listed here: Designing Character Controllers Intro Physics Behind Games and Character Interactions Projection Based Movement of KCC How the KCC Manages Jumping [Planned] Character Controller Case Study and Requirements Engineering [Planned] Camera controller and Dither Shader In the future, I will write up more wiki articles on how to use the KCC in your own project, how to modify the OpenKCC to add custom features, and on more in depth summaries on how the OpenKCC works as described in the videos above. Organization of Project The project is organized into a few namespaces: nickmaltbie.OpenKCC.Animation - Code related to animating the player's avatar. nickmaltbie.OpenKCC.Character - Code for moving and controlling the character with inputs. nickmaltbie.OpenKCC.Demo - Debug code used for demonstrations and videos. nickmaltbie.OpenKCC.Environment - Code used for creating and interacting with the environment. nickmaltbie.OpenKCC.UI - Code used to create a user interface via buttons and on screen controls. nickmaltbie.OpenKCC.Utils - Utility code for generic functions used across the project."
  }
}